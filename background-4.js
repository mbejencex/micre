LavaPack.loadBundle([[598,{stream:2339},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.storeAsStream=void 0;const n=e("stream");class s extends n.Duplex{constructor(e){super({objectMode:!0}),this.resume(),this.handler=e=>this.push(e),this.obsStore=e,this.obsStore.subscribe(this.handler)}pipe(e,t){const r=super.pipe(e,t);return e.write(this.obsStore.getState()),r}_write(e,t,r){this.obsStore.putState(e),r()}_read(e){return undefined}_destroy(e,t){this.obsStore.unsubscribe(this.handler),super._destroy(e,t)}}r.storeAsStream=function(e){return new s(e)}}}},{package:"@keystonehq/metamask-airgapped-keyring>@metamask/obs-store",file:"node_modules/@keystonehq/metamask-airgapped-keyring/node_modules/@metamask/obs-store/dist/asStream.js"}],[599,{"./ComposedStore":595,"./MergedStore":596,"./ObservableStore":597,"./asStream":598,"./transform":600},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){n===undefined&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===undefined&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(r,"__esModule",{value:!0}),s(e("./asStream"),r),s(e("./ComposedStore"),r),s(e("./MergedStore"),r),s(e("./ObservableStore"),r),s(e("./transform"),r)}}},{package:"@keystonehq/metamask-airgapped-keyring>@metamask/obs-store",file:"node_modules/@keystonehq/metamask-airgapped-keyring/node_modules/@metamask/obs-store/dist/index.js"}],[6,{},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.SINGLE_CALL_BALANCES_ADDRESS_SEPOLIA=r.SINGLE_CALL_BALANCES_ADDRESS_POLYGON=r.SINGLE_CALL_BALANCES_ADDRESS_OPTIMISM=r.SINGLE_CALL_BALANCES_ADDRESS_GOERLI=r.SINGLE_CALL_BALANCES_ADDRESS_FANTOM=r.SINGLE_CALL_BALANCES_ADDRESS_BSC=r.SINGLE_CALL_BALANCES_ADDRESS_AVALANCHE=r.SINGLE_CALL_BALANCES_ADDRESS_ARBITRUM=r.SINGLE_CALL_BALANCES_ADDRESS=void 0;r.SINGLE_CALL_BALANCES_ADDRESS="0xb1f8e55c7f64d203c1400b9d8555d050f94adf39";r.SINGLE_CALL_BALANCES_ADDRESS_GOERLI="0x9788C4E93f9002a7ad8e72633b11E8d1ecd51f9b";r.SINGLE_CALL_BALANCES_ADDRESS_SEPOLIA="";r.SINGLE_CALL_BALANCES_ADDRESS_BSC="0x2352c63A83f9Fd126af8676146721Fa00924d7e4";r.SINGLE_CALL_BALANCES_ADDRESS_OPTIMISM="0xB1c568e9C3E6bdaf755A60c7418C269eb11524FC";r.SINGLE_CALL_BALANCES_ADDRESS_POLYGON="0x2352c63A83f9Fd126af8676146721Fa00924d7e4";r.SINGLE_CALL_BALANCES_ADDRESS_AVALANCHE="0xD023D153a0DFa485130ECFdE2FAA7e612EF94818";r.SINGLE_CALL_BALANCES_ADDRESS_FANTOM="0x07f697424ABe762bB808c109860c04eA488ff92B";r.SINGLE_CALL_BALANCES_ADDRESS_ARBITRUM="0x151E24A486D7258dd7C33Fb67E4bB01919B7B32c"}}},{package:"$root$",file:"app/scripts/constants/contracts.ts"}],[60,{events:2336,loglevel:3629},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=o(e("events")),s=o(e("loglevel"));function o(e){return e&&e.__esModule?e:{default:e}}class i extends n.default{constructor(e={}){super();const t=e.migrations||[];this.migrations=t.sort(((e,t)=>e.version-t.version));const r=this.migrations.slice(-1)[0];this.defaultVersion=e.defaultVersion||r&&r.version||0}async migrateData(e=this.generateInitialState()){const t=this.migrations.filter((function(t){return t.version>e.meta.version}));for(const r of t)try{s.default.info(`Running migration ${r.version}...`);const t=await r.migrate(e);if(!t.data)throw new Error("Migrator - migration returned empty data");if(t.version!==undefined&&t.meta.version!==r.version)throw new Error("Migrator - Migration did not update version number correctly");e=t,s.default.info(`Migration ${r.version} complete`)}catch(t){const n=t.message;return t.message=`MetaMask Migration Error #${r.version}: ${n}`,this.emit("error",t),e}return e}generateInitialState(e){return{meta:{version:this.defaultVersion},data:e}}}r.default=i}}},{package:"$root$",file:"app/scripts/lib/migrator/index.js"}],[600,{through2:601},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.storeTransformStream=void 0;const n=e("through2");r.storeTransformStream=function(e){return n.obj(((t,r,n)=>{try{return n(null,e(t)),undefined}catch(e){return n(e),undefined}}))}}}},{package:"@keystonehq/metamask-airgapped-keyring>@metamask/obs-store",file:"node_modules/@keystonehq/metamask-airgapped-keyring/node_modules/@metamask/obs-store/dist/transform.js"}],[601,{_process:3761,"readable-stream":4056,util:2342,xtend:4304},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){(function(r){(function(){var n=e("readable-stream").Transform,s=e("util").inherits,o=e("xtend");function i(e){n.call(this,e),this._destroyed=!1}function a(e,t,r){r(null,e)}function l(e){return function(t,r,n){return"function"==typeof t&&(n=r,r=t,t={}),"function"!=typeof r&&(r=a),"function"!=typeof n&&(n=null),e(t,r,n)}}s(i,n),i.prototype.destroy=function(e){if(!this._destroyed){this._destroyed=!0;var t=this;r.nextTick((function(){e&&t.emit("error",e),t.emit("close")}))}},t.exports=l((function(e,t,r){var n=new i(e);return n._transform=t,r&&(n._flush=r),n})),t.exports.ctor=l((function(e,t,r){function n(t){if(!(this instanceof n))return new n(t);this.options=o(e,t),i.call(this,this.options)}return s(n,i),n.prototype._transform=t,r&&(n.prototype._flush=r),n})),t.exports.obj=l((function(e,t,r){var n=new i(o({objectMode:!0,highWaterMark:16},e));return n._transform=t,r&&(n._flush=r),n}))}).call(this)}).call(this,e("_process"))}}},{package:"@keystonehq/metamask-airgapped-keyring>@metamask/obs-store>through2",file:"node_modules/@keystonehq/metamask-airgapped-keyring/node_modules/through2/through2.js"}],[62,{"../platforms/extension":184,"@metamask/safe-event-emitter":1430},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=r.NOTIFICATION_MANAGER_EVENTS=void 0;var n=o(e("@metamask/safe-event-emitter")),s=o(e("../platforms/extension"));function o(e){return e&&e.__esModule?e:{default:e}}const i={POPUP_CLOSED:"onPopupClosed"};r.NOTIFICATION_MANAGER_EVENTS=i;class a extends n.default{constructor(){super(),this.platform=new s.default,this.platform.addOnRemovedListener(this._onWindowClosed.bind(this))}markAsAutomaticallyClosed(){this._popupAutomaticallyClosed=!0}async showPopup(e,t){this._popupId=t,this._setCurrentPopupId=e;const r=await this._getPopup(t);if(r)await this.platform.focusWindow(r.id);else{let e=0,t=0;try{const r=await this.platform.getLastFocusedWindow();t=r.top,e=r.left+(r.width-360)}catch(r){const{screenX:n,screenY:s,outerWidth:o}=window;t=Math.max(s,0),e=Math.max(n+(o-360),0)}const r=await this.platform.openWindow({url:"notification.html",type:"popup",width:360,height:620,left:e,top:t});r.left!==e&&"fullscreen"!==r.state&&await this.platform.updateWindowPosition(r.id,e,t),this._setCurrentPopupId(r.id),this._popupId=r.id}}_onWindowClosed(e){e===this._popupId&&(this._setCurrentPopupId(undefined),this._popupId=undefined,this.emit(i.POPUP_CLOSED,{automaticallyClosed:this._popupAutomaticallyClosed}),this._popupAutomaticallyClosed=undefined)}async _getPopup(){const e=await this.platform.getAllWindows();return this._getPopupIn(e)}_getPopupIn(e){return e?e.find((e=>e&&"popup"===e.type&&e.id===this._popupId)):null}}r.default=a}}},{package:"$root$",file:"app/scripts/lib/notification-manager.js"}],[63,{"../../../../shared/constants/network":4324,"./handlers":67,"@metamask/permission-controller":1336,"@metamask/rpc-methods":1373,"eth-rpc-errors":2738,lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.createMethodMiddleware=function(e){const t=u.filter((t=>!Object.hasOwnProperty.call(e,t)));if(t.length>0)throw new Error(`Missing expected hooks:\n\n${t.join("\n")}\n`);return async function(t,r,n,s){if(l.UNSUPPORTED_RPC_METHODS.has(t.method))return s(i.ethErrors.rpc.methodNotSupported());const a=d.get(t.method);if(a){const{implementation:i,hookNames:l}=a;try{return await i(t,r,n,s,(0,o.selectHooks)(e,l))}catch(e){return s(e)}}return n()}},r.createSnapMethodMiddleware=function(e,t){return async function(r,n,s,a){const l=h.get(r.method);if(l){if(/^snap_/iu.test(r.method)&&!e)return a(i.ethErrors.rpc.methodNotFound());const{implementation:c,hookNames:d}=l;try{return await c(r,n,s,a,(0,o.selectHooks)(t,d))}catch(e){return a(e)}}return s()}};var n,s=e("@metamask/permission-controller"),o=e("@metamask/rpc-methods"),i=e("eth-rpc-errors"),a=e("lodash"),l=e("../../../../shared/constants/network");const c=[...((n=e("./handlers"))&&n.__esModule?n:{default:n}).default,...s.permissionRpcMethods.handlers],d=c.reduce(((e,t)=>{for(const r of t.methodNames)e.set(r,t);return e}),new Map),u=Array.from(new Set((0,a.flatten)(c.map((({hookNames:e})=>Object.keys(e))))).values());const h=o.permittedMethods.reduce(((e,t)=>{for(const r of t.methodNames)e.set(r,t);return e}),new Map)}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/createMethodMiddleware.js"}],[64,{"../../../../../shared/constants/app":4316,"../../../../../shared/constants/metametrics":4323,"../../../../../shared/modules/network.utils":4357,"@metamask/controller-utils":1095,"eth-rpc-errors":2738,lodash:3617,"valid-url":4275},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,s=e("eth-rpc-errors"),o=(n=e("valid-url"))&&n.__esModule?n:{default:n},i=e("lodash"),a=e("@metamask/controller-utils"),l=e("../../../../../shared/constants/app"),c=e("../../../../../shared/modules/network.utils"),d=e("../../../../../shared/constants/metametrics");var u={methodNames:[l.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN],implementation:async function(e,t,r,n,{upsertNetworkConfiguration:u,getCurrentChainId:h,getCurrentRpcUrl:p,findNetworkConfigurationBy:m,setActiveNetwork:g,requestUserApproval:f,startApprovalFlow:C,endApprovalFlow:v}){var b;if(null===(b=e.params)||void 0===b||!b[0]||"object"!=typeof e.params[0])return n(s.ethErrors.rpc.invalidParams({message:`Expected single, object parameter. Received:\n${JSON.stringify(e.params)}`}));const{origin:w}=e,{chainId:k,chainName:y=null,blockExplorerUrls:S=null,nativeCurrency:T=null,rpcUrls:A}=e.params[0],M=Object.keys((0,i.omit)(e.params[0],["chainId","chainName","blockExplorerUrls","iconUrls","rpcUrls","nativeCurrency"]));if(M.length>0)return n(s.ethErrors.rpc.invalidParams({message:`Received unexpected keys on object parameter. Unsupported keys:\n${M}`}));const E=e=>{try{const t=new URL(e);return"localhost"===t.hostname||"127.0.0.1"===t.hostname}catch(e){return!1}},P=Array.isArray(A)?A.find((e=>E(e)||o.default.isHttpsUri(e))):null,_=null!==S&&Array.isArray(S)?S.find((e=>E(e)||o.default.isHttpsUri(e))):null;if(!P)return n(s.ethErrors.rpc.invalidParams({message:`Expected an array with at least one valid string HTTPS url 'rpcUrls', Received:\n${A}`}));if(null!==S&&!_)return n(s.ethErrors.rpc.invalidParams({message:`Expected null or array with at least one valid string HTTPS URL 'blockExplorerUrl'. Received: ${S}`}));const N="string"==typeof k&&k.toLowerCase();if(!(0,c.isPrefixedFormattedHexString)(N))return n(s.ethErrors.rpc.invalidParams({message:`Expected 0x-prefixed, unpadded, non-zero hexadecimal string 'chainId'. Received:\n${k}`}));if(!(0,c.isSafeChainId)(parseInt(N,16)))return n(s.ethErrors.rpc.invalidParams({message:`Invalid chain ID "${N}": numerical value greater than max safe value. Received:\n${k}`}));const I=m({chainId:N});if(I&&I.rpcUrl===P){t.result=null;const e=h(),r=p();if(e===N&&r===P)return n();try{await f({origin:w,type:a.ApprovalType.SwitchEthereumChain,requestData:{rpcUrl:I.rpcUrl,chainId:I.chainId,nickname:I.nickname,ticker:I.ticker}}),await g(I.id),t.result=null}catch(e){if(e.code!==s.errorCodes.provider.userRejectedRequest)return n(e)}return n()}if("string"!=typeof y||!y)return n(s.ethErrors.rpc.invalidParams({message:`Expected non-empty string 'chainName'. Received:\n${y}`}));const R=y.length>100?y.substring(0,100):y;if(null!==T){if("object"!=typeof T||Array.isArray(T))return n(s.ethErrors.rpc.invalidParams({message:`Expected null or object 'nativeCurrency'. Received:\n${T}`}));if(18!==T.decimals)return n(s.ethErrors.rpc.invalidParams({message:`Expected the number 18 for 'nativeCurrency.decimals' when 'nativeCurrency' is provided. Received: ${T.decimals}`}));if(!T.symbol||"string"!=typeof T.symbol)return n(s.ethErrors.rpc.invalidParams({message:`Expected a string 'nativeCurrency.symbol'. Received: ${T.symbol}`}))}const O=(null==T?void 0:T.symbol)||l.UNKNOWN_TICKER_SYMBOL;if(O!==l.UNKNOWN_TICKER_SYMBOL&&("string"!=typeof O||O.length<2||O.length>6))return n(s.ethErrors.rpc.invalidParams({message:`Expected 2-6 character string 'nativeCurrency.symbol'. Received:\n${O}`}));if(I&&I.chainId===N&&I.ticker!==O)return n(s.ethErrors.rpc.invalidParams({message:`nativeCurrency.symbol does not match currency symbol for a network the user already has added with the same chainId. Received:\n${O}`}));let L;const{id:U}=await C();try{await f({origin:w,type:a.ApprovalType.AddEthereumChain,requestData:{chainId:N,rpcPrefs:{blockExplorerUrl:_},chainName:R,rpcUrl:P,ticker:O}}),L=await u({chainId:N,rpcPrefs:{blockExplorerUrl:_},nickname:R,rpcUrl:P,ticker:O},{source:d.MetaMetricsNetworkEventSource.Dapp,referrer:w}),t.result=null}catch(e){return v({id:U}),n(e)}try{await f({origin:w,type:a.ApprovalType.SwitchEthereumChain,requestData:{rpcUrl:P,chainId:N,nickname:R,ticker:O,networkConfigurationId:L}})}catch(e){return n(e.code===s.errorCodes.provider.userRejectedRequest?undefined:e)}finally{v({id:U})}try{await g(L)}catch(e){return n(e)}return n()},hookNames:{upsertNetworkConfiguration:!0,getCurrentChainId:!0,getCurrentRpcUrl:!0,findNetworkConfigurationBy:!0,setActiveNetwork:!0,requestUserApproval:!0,startApprovalFlow:!0,endApprovalFlow:!0}};r.default=u}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/add-ethereum-chain.js"}],[65,{"../../../../../shared/constants/app":4316},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.ETH_ACCOUNTS],implementation:async function(e,t,r,n,{getAccounts:s}){return t.result=await s(),n()},hookNames:{getAccounts:!0}};r.default=n}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/eth-accounts.js"}],[66,{"../../../../../shared/constants/app":4316},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.GET_PROVIDER_STATE],implementation:async function(e,t,r,n,{getProviderState:s}){return t.result={...await s(e.origin)},n()},hookNames:{getProviderState:!0}};r.default=n}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/get-provider-state.js"}],[67,{"./add-ethereum-chain":64,"./eth-accounts":65,"./get-provider-state":66,"./log-web3-shim-usage":68,"./request-accounts":69,"./send-metadata":70,"./switch-ethereum-chain":71,"./watch-asset":72},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=u(e("./add-ethereum-chain")),s=u(e("./eth-accounts")),o=u(e("./get-provider-state")),i=u(e("./log-web3-shim-usage")),a=u(e("./request-accounts")),l=u(e("./send-metadata")),c=u(e("./switch-ethereum-chain")),d=u(e("./watch-asset"));function u(e){return e&&e.__esModule?e:{default:e}}var h=[n.default,s.default,o.default,i.default,a.default,l.default,c.default,d.default];r.default=h}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/index.js"}],[68,{"../../../../../shared/constants/app":4316,"../../../../../shared/constants/metametrics":4323},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("../../../../../shared/constants/app"),s=e("../../../../../shared/constants/metametrics");var o={methodNames:[n.MESSAGE_TYPE.LOG_WEB3_SHIM_USAGE],implementation:function(e,t,r,n,{sendMetrics:o,getWeb3ShimUsageState:i,setWeb3ShimUsageRecorded:a}){const{origin:l}=e;i(l)===undefined&&(a(l),o({event:"Website Accessed window.web3 Shim",category:s.MetaMetricsEventCategory.InpageProvider,referrer:{url:l}},{excludeMetaMetricsId:!0}));return t.result=!0,n()},hookNames:{sendMetrics:!0,getWeb3ShimUsageState:!0,setWeb3ShimUsageRecorded:!0}};r.default=o}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/log-web3-shim-usage.js"}],[69,{"../../../../../shared/constants/app":4316,"eth-rpc-errors":2738},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("eth-rpc-errors"),s=e("../../../../../shared/constants/app");var o={methodNames:[s.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS],implementation:async function(e,t,r,o,{origin:a,getAccounts:l,getUnlockPromise:c,hasPermission:d,requestAccountsPermission:u}){if(i.has(a))return t.error=n.ethErrors.rpc.resourceUnavailable(`Already processing ${s.MESSAGE_TYPE.ETH_REQUEST_ACCOUNTS}. Please wait.`),o();if(d(s.MESSAGE_TYPE.ETH_ACCOUNTS)){try{i.add(a),await c(!0),t.result=await l(),o()}catch(e){o(e)}finally{i.delete(a)}return undefined}try{await u()}catch(e){return t.error=e,o()}const h=await l();h.length>0?t.result=h:t.error=n.ethErrors.rpc.internal("Accounts unexpectedly unavailable. Please report this bug.");return o()},hookNames:{origin:!0,getAccounts:!0,getUnlockPromise:!0,hasPermission:!0,requestAccountsPermission:!0}};r.default=o;const i=new Set}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/request-accounts.js"}],[7,{"../../../shared/constants/alerts":4315,"@metamask/obs-store":1328},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("@metamask/obs-store"),s=e("../../../shared/constants/alerts");const o={alertEnabledness:s.TOGGLEABLE_ALERT_TYPES.reduce(((e,t)=>(e[t]=!0,e)),{}),unconnectedAccountAlertShownOrigins:{},web3ShimUsageOrigins:{}};r.default=class{constructor(e={}){const{initState:t={},preferencesStore:r}=e,s={...o,alertEnabledness:{...o.alertEnabledness,...t.alertEnabledness}};this.store=new n.ObservableStore(s),this.selectedAddress=r.getState().selectedAddress,r.subscribe((({selectedAddress:e})=>{this.store.getState().unconnectedAccountAlertShownOrigins&&this.selectedAddress!==e&&(this.selectedAddress=e,this.store.updateState({unconnectedAccountAlertShownOrigins:{}}))}))}setAlertEnabledness(e,t){let{alertEnabledness:r}=this.store.getState();r={...r},r[e]=t,this.store.updateState({alertEnabledness:r})}setUnconnectedAccountAlertShown(e){let{unconnectedAccountAlertShownOrigins:t}=this.store.getState();t={...t},t[e]=!0,this.store.updateState({unconnectedAccountAlertShownOrigins:t})}getWeb3ShimUsageState(e){return this.store.getState().web3ShimUsageOrigins[e]}setWeb3ShimUsageRecorded(e){this._setWeb3ShimUsageState(e,s.Web3ShimUsageAlertStates.recorded)}setWeb3ShimUsageAlertDismissed(e){this._setWeb3ShimUsageState(e,s.Web3ShimUsageAlertStates.dismissed)}_setWeb3ShimUsageState(e,t){let{web3ShimUsageOrigins:r}=this.store.getState();r={...r},r[e]=t,this.store.updateState({web3ShimUsageOrigins:r})}}}}},{package:"$root$",file:"app/scripts/controllers/alert.js"}],[70,{"../../../../../shared/constants/app":4316,"eth-rpc-errors":2738},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("eth-rpc-errors");var s={methodNames:[e("../../../../../shared/constants/app").MESSAGE_TYPE.SEND_METADATA],implementation:function(e,t,r,s,{addSubjectMetadata:o,subjectType:i}){const{origin:a,params:l}=e;if(!l||"object"!=typeof l||Array.isArray(l))return s(n.ethErrors.rpc.invalidParams({data:l}));{const{icon:e=null,name:t=null,...r}=l;o({...r,iconUrl:e,name:t,subjectType:i,origin:a})}return t.result=!0,s()},hookNames:{addSubjectMetadata:!0,subjectType:!0}};r.default=s}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/send-metadata.js"}],[71,{"../../../../../shared/constants/app":4316,"../../../../../shared/constants/network":4324,"../../../../../shared/modules/network.utils":4357,"@metamask/controller-utils":1095,"eth-rpc-errors":2738,lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("eth-rpc-errors"),s=e("lodash"),o=e("@metamask/controller-utils"),i=e("../../../../../shared/constants/app"),a=e("../../../../../shared/constants/network"),l=e("../../../../../shared/modules/network.utils");var c={methodNames:[i.MESSAGE_TYPE.SWITCH_ETHEREUM_CHAIN],implementation:async function(e,t,r,c,{getCurrentChainId:d,findNetworkConfigurationBy:u,setProviderType:h,setActiveNetwork:p,requestUserApproval:m}){var g;if(null===(g=e.params)||void 0===g||!g[0]||"object"!=typeof e.params[0])return c(n.ethErrors.rpc.invalidParams({message:`Expected single, object parameter. Received:\n${JSON.stringify(e.params)}`}));const{origin:f}=e,{chainId:C}=e.params[0],v=Object.keys((0,s.omit)(e.params[0],["chainId"]));if(v.length>0)return c(n.ethErrors.rpc.invalidParams({message:`Received unexpected keys on object parameter. Unsupported keys:\n${v}`}));const b="string"==typeof C&&C.toLowerCase();if(!(0,l.isPrefixedFormattedHexString)(b))return c(n.ethErrors.rpc.invalidParams({message:`Expected 0x-prefixed, unpadded, non-zero hexadecimal string 'chainId'. Received:\n${C}`}));if(!(0,l.isSafeChainId)(parseInt(b,16)))return c(n.ethErrors.rpc.invalidParams({message:`Invalid chain ID "${b}": numerical value greater than max safe value. Received:\n${C}`}));const w=function(e,t){if(Object.values(a.BUILT_IN_INFURA_NETWORKS).map((({chainId:e})=>e)).includes(e))return{chainId:e,ticker:a.CURRENCY_SYMBOLS.ETH,nickname:a.NETWORK_TO_NAME_MAP[e],rpcUrl:a.CHAIN_ID_TO_RPC_URL_MAP[e],type:a.CHAIN_ID_TO_TYPE_MAP[e]};return t({chainId:e})}(b,u);if(w){if(d()===b)return t.result=null,c();try{const e=await m({origin:f,type:o.ApprovalType.SwitchEthereumChain,requestData:w});Object.values(a.BUILT_IN_INFURA_NETWORKS).map((({chainId:e})=>e)).includes(b)?await h(e.type):await p(e.id),t.result=null}catch(e){return c(e)}return c()}return c(n.ethErrors.provider.custom({code:4902,message:`Unrecognized chain ID "${C}". Try adding the chain using ${i.MESSAGE_TYPE.ADD_ETHEREUM_CHAIN} first.`}))},hookNames:{getCurrentChainId:!0,findNetworkConfigurationBy:!0,setProviderType:!0,setActiveNetwork:!0,requestUserApproval:!0}};r.default=c}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/switch-ethereum-chain.js"}],[72,{"../../../../../shared/constants/app":4316,"@metamask/controller-utils":1095,"eth-rpc-errors":2738},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("@metamask/controller-utils"),s=e("eth-rpc-errors"),o=e("../../../../../shared/constants/app");var i={methodNames:[o.MESSAGE_TYPE.WATCH_ASSET,o.MESSAGE_TYPE.WATCH_ASSET_LEGACY],implementation:async function(e,t,r,o,{handleWatchAssetRequest:i}){try{const{params:{options:r,type:a},origin:l}=e,{tokenId:c}=r;return[n.ERC721,n.ERC1155].includes(a)&&c!==undefined&&"string"!=typeof c?o(s.ethErrors.rpc.invalidParams({message:`Expected parameter 'tokenId' to be type 'string'. Received type '${typeof c}'`})):(await i(r,a,l),t.result=!0,o())}catch(e){return o(e)}},hookNames:{handleWatchAssetRequest:!0}};r.default=i}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/handlers/watch-asset.js"}],[73,{"./createMethodMiddleware":63},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0});var n=e("./createMethodMiddleware");Object.keys(n).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in r&&r[e]===n[e]||Object.defineProperty(r,e,{enumerable:!0,get:function(){return n[e]}}))}))}}},{package:"$root$",file:"app/scripts/lib/rpc-method-middleware/index.js"}],[74,{"../../../shared/constants/app":4316,"../../../shared/modules/fetch-with-timeout":4352},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.securityProviderCheck=async function(e,t,r,n){let s;const a=e.msgParams||e.messageParams;if(t===o.MESSAGE_TYPE.ETH_SIGN_TYPED_DATA)s={host_name:null==a?void 0:a.origin,rpc_method_name:t,chain_id:r,data:null==a?void 0:a.data,currentLocale:n};else if(t===o.MESSAGE_TYPE.ETH_SIGN||t===o.MESSAGE_TYPE.PERSONAL_SIGN)s={host_name:null==a?void 0:a.origin,rpc_method_name:t,chain_id:r,data:{signer_address:null==a?void 0:a.from,msg_to_sign:null==a?void 0:a.data},currentLocale:n};else{var l,c,d,u,h,p;s={host_name:e.origin,rpc_method_name:t,chain_id:r,data:{from_address:null===(l=e.txParams)||void 0===l?void 0:l.from,to_address:null===(c=e.txParams)||void 0===c?void 0:c.to,gas:null===(d=e.txParams)||void 0===d?void 0:d.gas,gasPrice:null===(u=e.txParams)||void 0===u?void 0:u.gasPrice,value:null===(h=e.txParams)||void 0===h?void 0:h.value,data:null===(p=e.txParams)||void 0===p?void 0:p.data},currentLocale:n}}const m=await i("https://proxy.metafi.codefi.network/opensea/security/v1/validate",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(s)});return await m.json()};var n,s=(n=e("../../../shared/modules/fetch-with-timeout"))&&n.__esModule?n:{default:n},o=e("../../../shared/constants/app");const i=(0,s.default)()}}},{package:"$root$",file:"app/scripts/lib/security-provider-helpers.ts"}],[75,{"../../../shared/constants/keyring":4321,"@metamask/eth-keyring-controller":1194,loglevel:3629},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,s=e("@metamask/eth-keyring-controller"),o=(n=e("loglevel"))&&n.__esModule?n:{default:n},i=e("../../../shared/constants/keyring");var a={async verifyAccounts(e,t){if(!e||e.length<1)throw new Error("No created accounts defined.");const r=new s.KeyringController({}).getKeyringBuilderForType(i.KeyringType.hdKeyTree)(),n={mnemonic:t,numberOfAccounts:e.length};await r.deserialize(n);const a=await r.getAccounts();if(o.default.debug(`Created accounts: ${JSON.stringify(e)}`),o.default.debug(`Restored accounts: ${JSON.stringify(a)}`),a.length!==e.length)throw new Error("Wrong number of accounts");for(let t=0;t<a.length;t++)if(a[t].toLowerCase()!==e[t].toLowerCase())throw new Error(`Not identical accounts! Original: ${e[t]}, Restored: ${a[t]}`)}};r.default=a}}},{package:"$root$",file:"app/scripts/lib/seed-phrase-verifier.js"}],[76,{"../util":82,"@segment/loosely-validate-event":1719,buffer:2335,"is-retry-allowed":3396,lodash:3617,"remove-trailing-slash":4083,timers:4210},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){(function(t,n){(function(){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var s=c(e("remove-trailing-slash")),o=c(e("@segment/loosely-validate-event")),i=e("lodash"),a=c(e("is-retry-allowed")),l=e("../util");function c(e){return e&&e.__esModule?e:{default:e}}const d=()=>({});r.default=class{constructor(e,t={}){this.writeKey=e,this.host=(0,s.default)(t.host||"https://api.segment.io"),this.flushInterval=t.flushInterval||1e4,this.flushAt=t.flushAt||Math.max(t.flushAt,1)||20,this.queue=[],this.path="/v1/batch",this.maxQueueSize=460800,this.flushed=!1,this.retryCount=3,Object.defineProperty(this,"enable",{configurable:!1,writable:!1,enumerable:!0,value:!0})}_validate(e,t){(0,o.default)(e,t)}_message(e,t,r){return this._validate(t,e),this.enqueue(e,t,r),this}identify(e,t){return this._message("identify",e,t)}track(e,t){return this._message("track",e,t)}page(e,t){return this._message("page",e,t)}enqueue(e,t,r=d){if(!this.enable)return void n(r);const s={...t,type:e};if(s.context={...s.context,library:{name:"analytics-node"}},s.timestamp||(s.timestamp=new Date),s.messageId||(s.messageId=(0,l.generateRandomId)()),s.anonymousId&&!(0,i.isString)(s.anonymousId)&&(s.anonymousId=JSON.stringify(s.anonymousId)),s.userId&&!(0,i.isString)(s.userId)&&(s.userId=JSON.stringify(s.userId)),this.queue.push({message:s,callback:r}),!this.flushed)return this.flushed=!0,void this.flush();const o=this.queue.length>=this.flushAt,a=this.queue.reduce(((e,t)=>e+JSON.stringify(t).length),0)>=this.maxQueueSize;(o||a)&&this.flush(),this.flushInterval&&!this.timer&&(this.timer=setTimeout(this.flush.bind(this),this.flushInterval))}flush(e=d){if(!this.enable)return n(e),Promise.resolve();if(this.timer&&(clearTimeout(this.timer),this.timer=null),!this.queue.length)return n(e),Promise.resolve();const r=this.queue.splice(0,this.flushAt),s=r.map((e=>e.callback)),o={batch:r.map((e=>e.message)),timestamp:new Date,sentAt:new Date},i={Authorization:`Basic ${t.from(this.writeKey,"utf8").toString("base64")}`};return this._sendRequest(`${this.host}${this.path}`,{method:"POST",body:JSON.stringify(o),headers:i},(t=>{n((()=>{s.forEach((e=>e(t,o))),e(t,o)}))}),0)}_retryRequest(e,t,r,n){const s=100*Math.pow(2,n);setTimeout((()=>{this._sendRequest(e,t,r,n+1)}),s)}async _sendRequest(e,t,r,n){return fetch(e,t).then((async s=>{if(s.ok)r();else if(this._isErrorRetryable({response:s})&&n<=this.retryCount)this._retryRequest(e,t,r,n);else{const e=new Error(s.statusText);r(e)}})).catch((s=>{this._isErrorRetryable(s)&&n<=this.retryCount?this._retryRequest(e,t,r,n):r(s)}))}_isErrorRetryable(e){return!!function(e){return!e.response&&Boolean(e.code)&&"ECONNABORTED"!==e.code&&(0,a.default)(e)}(e)||!!e.response&&(e.response.status>=500&&e.response.status<=599||429===e.response.status)}}}).call(this)}).call(this,e("buffer").Buffer,e("timers").setImmediate)}}},{package:"$root$",file:"app/scripts/lib/segment/analytics.js"}],[77,{"../../../../shared/constants/time":4334,"./analytics":76},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.segment=r.createSegmentMock=void 0;var n,s=e("../../../../shared/constants/time"),o=(n=e("./analytics"))&&n.__esModule?n:{default:n};const i="XdGJ17zKf3NjBPCDQ2UDjJjkx6FYBMGP",a=undefined,l=5*s.SECOND,c=(e=a)=>{const t={queue:[],flush(){t.queue.forEach((([e,t])=>{t()})),t.queue=[]},track(r,n=(()=>undefined)){t.queue.push([r,n]),t.queue.length>=e&&t.flush()},page(){},identify(){}};return t};r.createSegmentMock=c;const d=i?new o.default(i,{host:null,flushAt:a,flushInterval:l}):c(a);r.segment=d}}},{package:"$root$",file:"app/scripts/lib/segment/index.js"}],[8,{"@metamask/obs-store":1328,events:2336},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n,s=(n=e("events"))&&n.__esModule?n:{default:n},o=e("@metamask/obs-store");function i(e,t){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.add(e)}function a(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(r!==undefined){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t,r){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return r}const c={currentAppVersion:"",previousAppVersion:"",previousMigrationVersion:0,currentMigrationVersion:0};var d=new WeakSet,u=new WeakSet;class h extends s.default{constructor({currentAppVersion:e="",currentMigrationVersion:t=0,state:r={}}){super(),i(this,u),i(this,d),a(this,"store",void 0),this.store=new o.ObservableStore({...c,...r}),l(this,d,p).call(this,e),l(this,u,m).call(this,t)}}function p(e){const t=this.store.getState().currentAppVersion;e!==t&&this.store.updateState({currentAppVersion:e,previousAppVersion:t})}function m(e){const t=this.store.getState().currentMigrationVersion;e!==t&&this.store.updateState({previousMigrationVersion:t,currentMigrationVersion:e})}r.default=h}}},{package:"$root$",file:"app/scripts/controllers/app-metadata.ts"}],[83,{"../../shared/constants/app":4316,"../../shared/constants/hardware-wallets":4320,"../../shared/constants/keyring":4321,"../../shared/constants/metametrics":4323,"../../shared/constants/network":4324,"../../shared/constants/permissions":4325,"../../shared/constants/swaps":4331,"../../shared/constants/test-flags":4333,"../../shared/constants/time":4334,"../../shared/constants/tokens":4335,"../../shared/constants/transaction":4336,"../../shared/lib/metamask-controller-utils":4339,"../../shared/lib/token-util.ts":4343,"../../shared/modules/conversion.utils":4350,"../../shared/modules/mv3.utils":4356,"../../shared/modules/string-utils":4363,"../../shared/modules/transaction.utils":4365,"../../shared/notifications":4367,"./account-import-strategies":4,"./controllers/alert":7,"./controllers/app-metadata":8,"./controllers/app-state":9,"./controllers/backup":10,"./controllers/cached-balances":11,"./controllers/decrypt-message":12,"./controllers/detect-tokens":13,"./controllers/encryption-public-key":14,"./controllers/ens":16,"./controllers/incoming-transactions":17,"./controllers/metametrics":18,"./controllers/onboarding":19,"./controllers/permissions":23,"./controllers/preferences":28,"./controllers/swaps":29,"./controllers/transactions":30,"./detect-multiple-instances":36,"./lib/ComposableObservableStore":38,"./lib/account-tracker":39,"./lib/createDupeReqFilterMiddleware":41,"./lib/createLoggerMiddleware":42,"./lib/createMetaRPCHandler":43,"./lib/createMetamaskMiddleware":44,"./lib/createOnboardingMiddleware":45,"./lib/createOriginMiddleware":46,"./lib/createRPCMethodTrackingMiddleware":47,"./lib/createTabIdMiddleware":49,"./lib/rpc-method-middleware":73,"./lib/security-provider-helpers":74,"./lib/seed-phrase-verifier":75,"./lib/segment":77,"./lib/stream-utils":81,"./lib/util":82,"./translate":185,"@keystonehq/metamask-airgapped-keyring":592,"@metamask/address-book-controller":1061,"@metamask/announcement-controller":1063,"@metamask/approval-controller":1066,"@metamask/assets-controllers":1085,"@metamask/base-controller":1090,"@metamask/browser-passworder":1091,"@metamask/controller-utils":1095,"@metamask/eth-json-rpc-middleware":1166,"@metamask/eth-keyring-controller":1194,"@metamask/eth-ledger-bridge-keyring":1209,"@metamask/eth-trezor-keyring":1263,"@metamask/gas-fee-controller":1286,"@metamask/network-controller":1314,"@metamask/notification-controller":1318,"@metamask/obs-store":1328,"@metamask/obs-store/dist/asStream":1327,"@metamask/permission-controller":1336,"@metamask/phishing-controller":1345,"@metamask/rate-limit-controller":1367,"@metamask/signature-controller":1443,"@metamask/smart-transactions-controller":1447,"@metamask/snaps-controllers":1462,"@metamask/subject-metadata-controller":1637,"@sentry/browser":1752,"await-semaphore":2192,buffer:2335,"eth-json-rpc-filters":2641,"eth-json-rpc-filters/subscriptionManager":2643,"eth-lattice-keyring":2645,"eth-query":2734,"eth-rpc-errors":2738,events:2336,"json-rpc-engine":3414,"json-rpc-middleware-stream":3418,lodash:3617,loglevel:3629,nanoid:3704,pump:3824},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){(function(t){(function(){Object.defineProperty(r,"__esModule",{value:!0}),r.default=r.METAMASK_CONTROLLER_EVENTS=void 0;var n=$e(e("events")),s=$e(e("pump")),o=e("@metamask/obs-store"),i=e("@metamask/obs-store/dist/asStream"),a=e("json-rpc-engine"),l=e("json-rpc-middleware-stream"),c=e("@metamask/eth-json-rpc-middleware"),d=e("@metamask/eth-keyring-controller"),u=e("lodash"),h=$e(e("eth-json-rpc-filters")),p=$e(e("eth-json-rpc-filters/subscriptionManager")),m=e("eth-rpc-errors"),g=e("await-semaphore"),f=$e(e("loglevel")),C=$e(e("@metamask/eth-trezor-keyring")),v=$e(e("@metamask/eth-ledger-bridge-keyring")),b=$e(e("eth-lattice-keyring")),w=e("@keystonehq/metamask-airgapped-keyring"),k=$e(e("eth-query")),y=$e(e("nanoid")),S=e("@sentry/browser"),T=e("@metamask/address-book-controller"),A=e("@metamask/approval-controller"),M=e("@metamask/base-controller"),E=e("@metamask/assets-controllers"),P=e("@metamask/phishing-controller"),_=e("@metamask/announcement-controller"),N=e("@metamask/network-controller"),I=e("@metamask/gas-fee-controller"),R=e("@metamask/permission-controller"),O=e("@metamask/subject-metadata-controller"),L=$e(e("@metamask/smart-transactions-controller")),U=e("@metamask/browser-passworder"),D=e("@metamask/rate-limit-controller"),x=e("@metamask/notification-controller"),j=e("@metamask/snaps-controllers"),F=e("@metamask/signature-controller"),$=e("@metamask/controller-utils"),B=e("../../shared/constants/transaction"),q=e("../../shared/constants/swaps"),K=e("../../shared/constants/network"),G=e("../../shared/constants/hardware-wallets"),H=e("../../shared/constants/keyring"),V=e("../../shared/constants/permissions"),W=e("../../shared/notifications"),Y=e("../../shared/constants/time"),z=e("../../shared/constants/app"),Q=e("../../shared/constants/metametrics"),J=e("../../shared/lib/token-util.ts"),X=e("../../shared/modules/string-utils"),Z=e("../../shared/modules/transaction.utils"),ee=e("../../shared/constants/tokens"),te=e("../../shared/lib/metamask-controller-utils"),re=e("../../shared/modules/mv3.utils"),ne=e("../../shared/modules/conversion.utils"),se=e("../../shared/constants/test-flags"),oe=e("./detect-multiple-instances"),ie=$e(e("./lib/ComposableObservableStore")),ae=$e(e("./lib/account-tracker")),le=$e(e("./lib/createDupeReqFilterMiddleware")),ce=$e(e("./lib/createLoggerMiddleware")),de=e("./lib/rpc-method-middleware"),ue=$e(e("./lib/createOriginMiddleware")),he=$e(e("./lib/createTabIdMiddleware")),pe=$e(e("./lib/createOnboardingMiddleware")),me=e("./lib/stream-utils"),ge=$e(e("./controllers/ens")),fe=$e(e("./controllers/preferences")),Ce=$e(e("./controllers/app-state")),ve=$e(e("./controllers/cached-balances")),be=$e(e("./controllers/alert")),we=$e(e("./controllers/onboarding")),ke=$e(e("./controllers/backup")),ye=$e(e("./controllers/incoming-transactions")),Se=$e(e("./controllers/decrypt-message")),Te=$e(e("./controllers/transactions")),Ae=$e(e("./controllers/detect-tokens")),Me=$e(e("./controllers/swaps")),Ee=$e(e("./account-import-strategies")),Pe=$e(e("./lib/seed-phrase-verifier")),_e=$e(e("./controllers/metametrics")),Ne=e("./lib/segment"),Ie=$e(e("./lib/createMetaRPCHandler")),Re=e("./lib/util"),Oe=$e(e("./lib/createMetamaskMiddleware")),Le=$e(e("./controllers/encryption-public-key")),Ue=$e(e("./controllers/app-metadata")),De=e("./controllers/permissions"),xe=$e(e("./lib/createRPCMethodTrackingMiddleware")),je=e("./lib/security-provider-helpers"),Fe=e("./translate");function $e(e){return e&&e.__esModule?e:{default:e}}function Be(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(r!==undefined){var n=r.call(e,t||"default");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.METAMASK_CONTROLLER_EVENTS={UPDATE_BADGE:"updateBadge",APPROVAL_STATE_CHANGE:"ApprovalController:stateChange"};class qe extends n.default{constructor(e){var t;super(),Be(this,"_trackSnapExportUsage",(0,u.throttle)(((e,t)=>this.metaMetricsController.trackEvent({event:Q.MetaMetricsEventName.SnapExportUsed,category:Q.MetaMetricsEventCategory.Snaps,properties:{snap_id:e,export:t}})),60*Y.SECOND)),Be(this,"handleWatchAssetRequest",((e,t,r)=>{switch(t){case $.ERC20:return this.tokensController.watchAsset(e,t);case $.ERC721:case $.ERC1155:return this.nftController.watchNft(e,t,r);default:throw new Error(`Asset type ${t} not supported`)}})),Be(this,"removePermissionsFor",(e=>{try{this.permissionController.revokePermissions(e)}catch(e){if(!(e instanceof R.PermissionsRequestNotFoundError))throw e}})),Be(this,"updateCaveat",((e,t,r,n)=>{try{this.controllerMessenger.call("PermissionController:updateCaveat",e,t,r,n)}catch(e){if(!(e instanceof R.PermissionsRequestNotFoundError))throw e}})),Be(this,"rejectPermissionsRequest",(e=>{try{this.permissionController.rejectPermissionsRequest(e)}catch(e){if(!(e instanceof R.PermissionsRequestNotFoundError))throw e}})),Be(this,"acceptPermissionsRequest",(e=>{try{this.permissionController.acceptPermissionsRequest(e)}catch(e){if(!(e instanceof R.PermissionsRequestNotFoundError))throw e}})),Be(this,"resolvePendingApproval",(async(e,t,r)=>{try{await this.approvalController.accept(e,t,r)}catch(e){if(!(e instanceof A.ApprovalRequestNotFoundError))throw e}})),Be(this,"rejectPendingApproval",((e,t)=>{try{this.approvalController.reject(e,new m.EthereumRpcError(t.code,t.message,t.data))}catch(e){if(!(e instanceof A.ApprovalRequestNotFoundError))throw e}}));const{isFirstMetaMaskControllerSetup:r}=e;this.defaultMaxListeners=20,this.sendUpdate=(0,u.debounce)(this.privateSendUpdate.bind(this),200*Y.MILLISECOND),this.opts=e,this.extension=e.browser,this.platform=e.platform,this.notificationManager=e.notificationManager;const n=e.initState||{},s=this.platform.getVersion();this.recordFirstTimeInfo(n),this.activeControllerConnections=0,this.getRequestAccountTabIds=e.getRequestAccountTabIds,this.getOpenMetamaskTabsIds=e.getOpenMetamaskTabsIds,this.controllerMessenger=new M.ControllerMessenger,this.localStoreApiWrapper=e.localStore,this.currentMigrationVersion=e.currentMigrationVersion,this.store=new ie.default({state:n,controllerMessenger:this.controllerMessenger,persist:!0}),this.connections={},this.createVaultMutex=new g.Mutex,this.extension.runtime.onInstalled.addListener((e=>{"update"===e.reason&&"8.1.0"===s&&this.platform.openExtensionInBrowser()})),this.appMetadataController=new Ue.default({state:n.AppMetadataController,currentMigrationVersion:this.currentMigrationVersion,currentAppVersion:s}),this.approvalController=new A.ApprovalController({messenger:this.controllerMessenger.getRestricted({name:"ApprovalController"}),showApprovalRequest:e.showUserConfirmation,typesExcludedFromRateLimiting:[$.ApprovalType.EthSign,$.ApprovalType.PersonalSign,$.ApprovalType.EthSignTypedData,$.ApprovalType.Transaction,$.ApprovalType.WatchAsset,$.ApprovalType.EthGetEncryptionPublicKey,$.ApprovalType.EthDecrypt]});const o=this.controllerMessenger.getRestricted({name:"NetworkController",allowedEvents:["NetworkController:stateChange","NetworkController:networkWillChange","NetworkController:networkDidChange","NetworkController:infuraIsBlocked","NetworkController:infuraIsUnblocked"]});let i={};n.NetworkController&&(i=n.NetworkController),this.networkController=new N.NetworkController({messenger:o,state:i,infuraProjectId:e.infuraProjectId,trackMetaMetricsEvent:(...e)=>this.metaMetricsController.trackEvent(...e)}),this.networkController.initializeProvider(),this.provider=this.networkController.getProviderAndBlockTracker().provider,this.blockTracker=this.networkController.getProviderAndBlockTracker().blockTracker;const a=this.controllerMessenger.getRestricted({name:"TokenListController",allowedEvents:["TokenListController:stateChange","NetworkController:stateChange"]});this.tokenListController=new E.TokenListController({chainId:this.networkController.state.providerConfig.chainId,preventPollingOnNetworkRestart:!n.TokenListController||n.TokenListController.preventPollingOnNetworkRestart,messenger:a,state:n.TokenListController}),this.preferencesController=new fe.default({initState:n.PreferencesController,initLangCode:e.initLangCode,onInfuraIsBlocked:o.subscribe.bind(o,"NetworkController:infuraIsBlocked"),onInfuraIsUnblocked:o.subscribe.bind(o,"NetworkController:infuraIsUnblocked"),tokenListController:this.tokenListController,provider:this.provider}),this.preferencesController.store.subscribe((async({currentLocale:e})=>{await(0,Fe.updateCurrentLocale)(e)}));const l=this.controllerMessenger.getRestricted({name:"TokensController",allowedActions:["ApprovalController:addRequest"],allowedEvents:["NetworkController:stateChange"]});this.tokensController=new E.TokensController({messenger:l,chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:o.subscribe.bind(o,"NetworkController:stateChange"),config:{provider:this.provider},state:n.TokensController}),this.assetsContractController=new E.AssetsContractController({chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:e=>this.preferencesController.store.subscribe(e),onNetworkStateChange:e=>o.subscribe("NetworkController:networkDidChange",(()=>{const t=this.networkController.state;return e(t)}))},{provider:this.provider},n.AssetsContractController);const c=this.controllerMessenger.getRestricted({name:"NftController",allowedActions:[`${this.approvalController.name}:addRequest`]});this.nftController=new E.NftController({messenger:c,chainId:this.networkController.state.providerConfig.chainId,onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:o.subscribe.bind(o,"NetworkController:stateChange"),getERC721AssetName:this.assetsContractController.getERC721AssetName.bind(this.assetsContractController),getERC721AssetSymbol:this.assetsContractController.getERC721AssetSymbol.bind(this.assetsContractController),getERC721TokenURI:this.assetsContractController.getERC721TokenURI.bind(this.assetsContractController),getERC721OwnerOf:this.assetsContractController.getERC721OwnerOf.bind(this.assetsContractController),getERC1155BalanceOf:this.assetsContractController.getERC1155BalanceOf.bind(this.assetsContractController),getERC1155TokenURI:this.assetsContractController.getERC1155TokenURI.bind(this.assetsContractController),onNftAdded:({address:e,symbol:t,tokenId:r,standard:n,source:s})=>this.metaMetricsController.trackEvent({event:Q.MetaMetricsEventName.NftAdded,category:Q.MetaMetricsEventCategory.Wallet,properties:{token_contract_address:e,token_symbol:t,asset_type:B.AssetType.NFT,token_standard:n,source:s},sensitiveProperties:{tokenId:r}})},{},n.NftController),this.nftController.setApiKey(null),this.nftDetectionController=new E.NftDetectionController({chainId:this.networkController.state.providerConfig.chainId,onNftsStateChange:e=>this.nftController.subscribe(e),onPreferencesStateChange:this.preferencesController.store.subscribe.bind(this.preferencesController.store),onNetworkStateChange:o.subscribe.bind(o,"NetworkController:stateChange"),getOpenSeaApiKey:()=>this.nftController.openSeaApiKey,getBalancesInSingleCall:this.assetsContractController.getBalancesInSingleCall.bind(this.assetsContractController),addNft:this.nftController.addNft.bind(this.nftController),getNftState:()=>this.nftController.state}),this.metaMetricsController=new _e.default({segment:Ne.segment,preferencesStore:this.preferencesController.store,onNetworkDidChange:o.subscribe.bind(o,"NetworkController:networkDidChange"),getNetworkIdentifier:()=>{const{type:e,rpcUrl:t}=this.networkController.state.providerConfig;return e===K.NETWORK_TYPES.RPC?t:e},getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,version:this.platform.getVersion(),environment:"production",extension:this.extension,initState:n.MetaMetricsController,captureException:S.captureException}),this.on("update",(e=>{this.metaMetricsController.handleMetaMaskStateUpdate(e)}));const h=this.controllerMessenger.getRestricted({name:"GasFeeController"}),p=q.GAS_API_BASE_URL;this.gasFeeController=new I.GasFeeController({state:n.GasFeeController,interval:1e4,messenger:h,clientId:q.SWAPS_CLIENT_ID,getProvider:()=>this.networkController.getProviderAndBlockTracker().provider,onNetworkStateChange:e=>{o.subscribe("NetworkController:networkDidChange",(()=>e(this.networkController.state)))},getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),legacyAPIEndpoint:`${p}/networks/<chain_id>/gasPrices`,EIP1559APIEndpoint:`${p}/networks/<chain_id>/suggestedGasFees`,getCurrentNetworkLegacyGasAPICompatibility:()=>{const{chainId:e}=this.networkController.state.providerConfig;return e===K.CHAIN_IDS.BSC},getChainId:()=>this.networkController.state.providerConfig.chainId}),this.qrHardwareKeyring=new w.MetaMaskKeyring,this.appStateController=new Ce.default({addUnlockListener:this.on.bind(this,"unlock"),isUnlocked:this.isUnlocked.bind(this),initState:n.AppStateController,onInactiveTimeout:()=>this.setLocked(),preferencesStore:this.preferencesController.store,qrHardwareStore:this.qrHardwareKeyring.getMemStore(),messenger:this.controllerMessenger.getRestricted({name:"AppStateController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`]})});const k=this.controllerMessenger.getRestricted({name:"CurrencyRateController"});this.currencyRateController=new E.CurrencyRateController({includeUsdRate:!0,messenger:k,state:{...n.CurrencyController,nativeCurrency:this.networkController.state.providerConfig.ticker}}),this.phishingController=new P.PhishingController({},n.PhishingController),this.phishingController.maybeUpdateState();const y=this.controllerMessenger.getRestricted({name:"AnnouncementController"});let U=W.UI_NOTIFICATIONS;this.announcementController=new _.AnnouncementController({messenger:y,allAnnouncements:U,state:n.AnnouncementController}),this.tokenRatesController=new E.TokenRatesController({chainId:this.networkController.state.providerConfig.chainId,onTokensStateChange:e=>this.tokensController.subscribe(e),onCurrencyRateStateChange:e=>this.controllerMessenger.subscribe(`${this.currencyRateController.name}:stateChange`,e),onNetworkStateChange:o.subscribe.bind(o,"NetworkController:stateChange")},{disabled:!this.preferencesController.store.getState().useCurrencyRateCheck},n.TokenRatesController),this.preferencesController.store.subscribe((0,Re.previousValueComparator)(((e,t)=>{const{useCurrencyRateCheck:r}=e,{useCurrencyRateCheck:n}=t;n&&!r?(this.currencyRateController.start(),this.tokenRatesController.configure({disabled:!1},!1,!1)):!n&&r&&(this.currencyRateController.stop(),this.tokenRatesController.configure({disabled:!0},!1,!1))}),this.preferencesController.store.getState())),this.ensController=new ge.default({provider:this.provider,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,onNetworkDidChange:o.subscribe.bind(o,"NetworkController:networkDidChange")}),this.onboardingController=new we.default({initState:n.OnboardingController}),this.incomingTransactionsController=new ye.default({blockTracker:this.blockTracker,onNetworkDidChange:o.subscribe.bind(o,"NetworkController:networkDidChange"),getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,preferencesController:this.preferencesController,onboardingController:this.onboardingController,initState:n.IncomingTransactionsController}),this.accountTracker=new ae.default({provider:this.provider,blockTracker:this.blockTracker,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getNetworkIdentifier:()=>{const{type:e,rpcUrl:t}=this.networkController.state.providerConfig;return e===K.NETWORK_TYPES.RPC?t:e},preferencesController:this.preferencesController,onboardingController:this.onboardingController,initState:re.isManifestV3&&!1===r&&null!==(t=n.AccountTracker)&&void 0!==t&&t.accounts?{accounts:n.AccountTracker.accounts}:{accounts:{}}}),this.on("controllerConnectionChanged",(e=>{const{completedOnboarding:t}=this.onboardingController.store.getState();e>0&&t?this.triggerNetworkrequests():this.stopNetworkRequests()})),this.onboardingController.store.subscribe((0,Re.previousValueComparator)((async(e,t)=>{const{completedOnboarding:r}=e,{completedOnboarding:n}=t;!r&&n&&this.triggerNetworkrequests()}),this.onboardingController.store.getState())),this.cachedBalancesController=new ve.default({accountTracker:this.accountTracker,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,initState:n.CachedBalancesController});let G=[(0,d.keyringBuilderFactory)(w.MetaMaskKeyring)];if(this.canUseHardwareWallets()){var H;const e=null===(H=this.opts.overrides)||void 0===H?void 0:H.keyrings;G=[(null==e?void 0:e.trezor)||C.default,(null==e?void 0:e.ledger)||v.default,(null==e?void 0:e.lattice)||b.default,w.MetaMaskKeyring].map((e=>(0,d.keyringBuilderFactory)(e)))}this.keyringController=new d.KeyringController({keyringBuilders:G,initState:n.KeyringController,encryptor:e.encryptor||undefined,cacheEncryptionKey:re.isManifestV3}),this.keyringController.memStore.subscribe((e=>this._onKeyringControllerUpdate(e))),this.keyringController.on("unlock",(()=>this._onUnlock())),this.keyringController.on("lock",(()=>this._onLock()));const ee=()=>this.preferencesController.store.getState().identities;this.permissionController=new R.PermissionController({messenger:this.controllerMessenger.getRestricted({name:"PermissionController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:hasRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`,"SnapController:getPermitted","SnapController:install","SubjectMetadataController:getSubjectMetadata"]}),state:n.PermissionController,caveatSpecifications:(0,De.getCaveatSpecifications)({getIdentities:ee}),permissionSpecifications:{...(0,De.getPermissionSpecifications)({getIdentities:ee,getAllAccounts:this.keyringController.getAccounts.bind(this.keyringController),captureKeyringTypesWithMissingIdentities:(e={},t=[])=>{const r=t.filter((t=>!e[t])).map((e=>{var t;return null===(t=this.keyringController.getKeyringForAccount(e))||void 0===t?void 0:t.type})),n=Object.keys(e||{}).length,s=Object.keys(this.accountTracker.store.getState().accounts||{}).length;(0,S.captureException)(new Error(`Attempt to get permission specifications failed because their were ${t.length} accounts, but ${n} identities, and the ${r} keyrings included accounts with missing identities. Meanwhile, there are ${s} accounts in the account tracker.`))}}),...this.getSnapPermissionSpecifications()},unrestrictedMethods:De.unrestrictedMethods}),this.permissionLogController=new De.PermissionLogController({restrictedMethods:new Set(Object.keys(V.RestrictedMethods)),initState:n.PermissionLogController}),this.subjectMetadataController=new O.SubjectMetadataController({messenger:this.controllerMessenger.getRestricted({name:"SubjectMetadataController",allowedActions:[`${this.permissionController.name}:hasPermissions`]}),state:n.SubjectMetadataController,subjectCacheLimit:100});const ne={iframeUrl:new URL("https://execution.consensys.io/1.0.2/index.html"),messenger:this.controllerMessenger.getRestricted({name:"ExecutionService"}),setupSnapProvider:this.setupSnapProvider.bind(this)};this.snapExecutionService=new j.IframeExecutionService(ne);const se=this.controllerMessenger.getRestricted({name:"SnapController",allowedEvents:["ExecutionService:unhandledError","ExecutionService:outboundRequest","ExecutionService:outboundResponse","SnapController:snapInstalled","SnapController:snapUpdated"],allowedActions:[`${this.permissionController.name}:getEndowments`,`${this.permissionController.name}:getPermissions`,`${this.permissionController.name}:hasPermission`,`${this.permissionController.name}:hasPermissions`,`${this.permissionController.name}:requestPermissions`,`${this.permissionController.name}:revokeAllPermissions`,`${this.permissionController.name}:revokePermissions`,`${this.permissionController.name}:revokePermissionForAllSubjects`,`${this.permissionController.name}:getSubjectNames`,`${this.permissionController.name}:updateCaveat`,`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:updateRequestState`,`${this.permissionController.name}:grantPermissions`,`${this.subjectMetadataController.name}:getSubjectMetadata`,"ExecutionService:executeSnap","ExecutionService:getRpcRequestHandler","ExecutionService:terminateSnap","ExecutionService:terminateAllSnaps","ExecutionService:handleRpcRequest","SnapsRegistry:get","SnapsRegistry:getMetadata","SnapsRegistry:update"]}),le=!0;this.snapController=new j.SnapController({environmentEndowmentPermissions:Object.values(V.EndowmentPermissions),excludedPermissions:{...V.ExcludedSnapPermissions,...V.ExcludedSnapEndowments},closeAllConnections:this.removeAllConnections.bind(this),state:n.SnapController,messenger:se,featureFlags:{dappsCanUpdateSnaps:!0,allowLocalSnaps:!1,requireAllowlist:le}}),this.notificationController=new x.NotificationController({messenger:this.controllerMessenger.getRestricted({name:"NotificationController"}),state:n.NotificationController}),this.rateLimitController=new D.RateLimitController({state:n.RateLimitController,messenger:this.controllerMessenger.getRestricted({name:"RateLimitController"}),implementations:{showNativeNotification:{method:(e,t)=>{const r=this.controllerMessenger.call("SubjectMetadataController:getState").subjectMetadata[e];return this.platform._showNotification((null==r?void 0:r.name)??e,t).catch((e=>{f.default.error("Failed to create notification",e)})),null},rateLimitCount:2,rateLimitTimeout:3e5},showInAppNotification:{method:(e,t)=>(this.controllerMessenger.call("NotificationController:show",e,t),null),rateLimitCount:5,rateLimitTimeout:6e4}}});const ce=this.controllerMessenger.getRestricted({name:"CronjobController",allowedEvents:["SnapController:snapInstalled","SnapController:snapUpdated","SnapController:snapRemoved"],allowedActions:[`${this.permissionController.name}:getPermissions`,"SnapController:handleRequest","SnapController:getAll"]});this.cronjobController=new j.CronjobController({state:n.CronjobController,messenger:ce});const de=this.controllerMessenger.getRestricted({name:"SnapsRegistry",allowedEvents:[],allowedActions:[]});this.snapsRegistry=new j.JsonSnapsRegistry({state:n.SnapsRegistry,messenger:de,refetchOnAllowlistMiss:le,failOnUnavailableRegistry:le,url:{registry:"https://acl.execution.consensys.io/latest/registry.json",signature:"https://acl.execution.consensys.io/latest/signature.json"},publicKey:"0x025b65308f0f0fb8bc7f7ff87bfc296e0330eee5d3c1d1ee4a048b2fd6a86fa0a6"});const ue=this.controllerMessenger.getRestricted({name:"DetectTokensController",allowedEvents:["NetworkController:stateChange"]});if(this.detectTokensController=new Ae.default({messenger:ue,preferences:this.preferencesController,tokensController:this.tokensController,assetsContractController:this.assetsContractController,network:this.networkController,keyringMemStore:this.keyringController.memStore,tokenList:this.tokenListController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.addressBookController=new T.AddressBookController(undefined,n.AddressBookController),this.alertController=new be.default({initState:n.AlertController,preferencesStore:this.preferencesController.store}),this.backupController=new ke.default({preferencesController:this.preferencesController,addressBookController:this.addressBookController,networkController:this.networkController,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.txController=new Te.default({initState:n.TransactionController||n.TransactionManager,getPermittedAccounts:this.getPermittedAccounts.bind(this),getProviderConfig:()=>this.networkController.state.providerConfig,getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),getCurrentAccountEIP1559Compatibility:this.getCurrentAccountEIP1559Compatibility.bind(this),getNetworkId:()=>this.networkController.state.networkId,getNetworkStatus:()=>this.networkController.state.networkStatus,onNetworkStateChange:e=>{o.subscribe("NetworkController:stateChange",(()=>e()),(({networkId:e})=>e))},getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,preferencesStore:this.preferencesController.store,txHistoryLimit:60,signTransaction:this.keyringController.signTransaction.bind(this.keyringController),provider:this.provider,blockTracker:this.blockTracker,createEventFragment:this.metaMetricsController.createEventFragment.bind(this.metaMetricsController),updateEventFragment:this.metaMetricsController.updateEventFragment.bind(this.metaMetricsController),finalizeEventFragment:this.metaMetricsController.finalizeEventFragment.bind(this.metaMetricsController),getEventFragmentById:this.metaMetricsController.getEventFragmentById.bind(this.metaMetricsController),trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getParticipateInMetrics:()=>this.metaMetricsController.state.participateInMetaMetrics,getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController),getExternalPendingTransactions:this.getExternalPendingTransactions.bind(this),getAccountType:this.getAccountType.bind(this),getDeviceModel:this.getDeviceModel.bind(this),getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),securityProviderRequest:this.securityProviderRequest.bind(this),messenger:this.controllerMessenger.getRestricted({name:"TransactionController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`]})}),this.txController.on("tx:status-update",(async(e,t)=>{if(t===B.TransactionStatus.confirmed||t===B.TransactionStatus.failed){const t=this.txController.txStateManager.getTransaction(e);let o={};if(t.chainId){const{networkConfigurations:e}=this.networkController.state,r=Object.values(e).find((e=>e.chainId===t.chainId));o=(null==r?void 0:r.rpcPrefs)??{}}try{await this.platform.showTransactionNotification(t,o)}catch(e){f.default.error("Failed to create transaction notification",e)}const{txReceipt:i}=t;if(t.type===B.TransactionType.tokenMethodTransferFrom&&t.txParams!==undefined){var r,n;const{data:e,to:s,from:o}=t.txParams,{chainId:i}=t,a=(0,Z.parseStandardTokenTransactionData)(e),l=(0,J.getTokenIdParam)(a)??(0,te.getTokenValueParam)(a),{allNfts:c}=this.nftController.state,d=null==c||null===(r=c[o])||void 0===r||null===(n=r[i])||void 0===n?void 0:n.find((({address:e,tokenId:t})=>(0,X.isEqualCaseInsensitive)(e,s)&&t===l));d&&this.nftController.checkAndUpdateSingleNftOwnershipStatus(d,!1,{userAddress:o,chainId:i})}const a=this.getState();var s;if(i&&"0x0"===i.status)this.metaMetricsController.trackEvent({event:"Tx Status Update: On-Chain Failure",category:Q.MetaMetricsEventCategory.Background,properties:{action:"Transactions",errorMessage:null===(s=t.simulationFails)||void 0===s?void 0:s.reason,numberOfTokens:a.tokens.length,numberOfAccounts:Object.keys(a.accounts).length}},{matomoEvent:!0})}})),o.subscribe("NetworkController:networkDidChange",(async()=>{const{ticker:e}=this.networkController.state.providerConfig;try{await this.currencyRateController.setNativeCurrency(e)}catch(e){console.error(e)}})),this.networkController.lookupNetwork(),this.decryptMessageController=new Se.default({getState:this.getState.bind(this),keyringController:this.keyringController,messenger:this.controllerMessenger.getRestricted({name:"DecryptMessageController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`]}),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.encryptionPublicKeyController=new Le.default({messenger:this.controllerMessenger.getRestricted({name:"EncryptionPublicKeyController",allowedActions:[`${this.approvalController.name}:addRequest`,`${this.approvalController.name}:acceptRequest`,`${this.approvalController.name}:rejectRequest`]}),keyringController:this.keyringController,getState:this.getState.bind(this),metricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)}),this.signatureController=new F.SignatureController({messenger:this.controllerMessenger.getRestricted({name:"SignatureController",allowedActions:[`${this.approvalController.name}:addRequest`]}),keyringController:this.keyringController,isEthSignEnabled:()=>{var e,t;return null===(e=this.preferencesController.store.getState())||void 0===e||null===(t=e.disabledRpcMethodPreferences)||void 0===t?void 0:t.eth_sign},getAllState:this.getState.bind(this),securityProviderRequest:this.securityProviderRequest.bind(this),getCurrentChainId:()=>this.networkController.state.providerConfig.chainId}),this.signatureController.hub.on("cancelWithReason",(({message:e,reason:t})=>{this.metaMetricsController.trackEvent({event:t,category:Q.MetaMetricsEventCategory.Transactions,properties:{action:"Sign Request",type:e.type}})})),this.swapsController=new Me.default({getBufferedGasLimit:this.txController.txGasUtil.getBufferedGasLimit.bind(this.txController.txGasUtil),networkController:this.networkController,onNetworkStateChange:o.subscribe.bind(o,"NetworkController:stateChange"),provider:this.provider,getProviderConfig:()=>this.networkController.state.providerConfig,getTokenRatesState:()=>this.tokenRatesController.state,getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getEIP1559GasFeeEstimates:this.gasFeeController.fetchGasFeeEstimates.bind(this.gasFeeController)},n.SwapsController),this.smartTransactionsController=new L.default({onNetworkStateChange:o.subscribe.bind(o,"NetworkController:stateChange"),getNetwork:()=>this.networkController.state.networkId??"loading",getNonceLock:this.txController.nonceTracker.getNonceLock.bind(this.txController.nonceTracker),confirmExternalTransaction:this.txController.confirmExternalTransaction.bind(this.txController),provider:this.provider,trackMetaMetricsEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController)},{supportedChainIds:[K.CHAIN_IDS.MAINNET,K.CHAIN_IDS.GOERLI]},n.SmartTransactionsController),this.txController.on("newSwapApproval",(e=>{this.swapsController.setApproveTxId(e.id)})),this.txController.on("newSwap",(e=>{this.swapsController.setTradeTxId(e.id)})),o.subscribe("NetworkController:networkDidChange",(()=>{this.accountTracker._updateAccounts()})),o.subscribe("NetworkController:networkWillChange",(()=>{this.txController.txStateManager.clearUnapprovedTxs(),this.encryptionPublicKeyController.clearUnapproved(),this.decryptMessageController.clearUnapproved(),this.signatureController.clearUnapproved(),this.approvalController.clear()})),re.isManifestV3&&globalThis.isFirstTimeProfileLoaded===undefined){const{serviceWorkerLastActiveTime:e}=this.appStateController.store.getState(),t={category:Q.MetaMetricsEventCategory.ServiceWorkers,event:Q.MetaMetricsEventName.ServiceWorkerRestarted,properties:{service_worker_restarted_time:Date.now()-e}};try{this.metaMetricsController.trackEvent(t)}catch(e){f.default.warn("Failed to track service worker restart metric:",e)}}this.metamaskMiddleware=(0,Oe.default)({static:{eth_syncing:!1,web3_clientVersion:`MetaMask/v${s}`},version:s,getAccounts:async({origin:e},{suppressUnauthorizedError:t=!0}={})=>{if(e===z.ORIGIN_METAMASK){const e=this.preferencesController.getSelectedAddress();return e?[e]:[]}return this.isUnlocked()?await this.getPermittedAccounts(e,{suppressUnauthorizedError:t}):[]},processTransaction:this.newUnapprovedTransaction.bind(this),processEthSignMessage:this.signatureController.newUnsignedMessage.bind(this.signatureController),processTypedMessage:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processTypedMessageV3:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processTypedMessageV4:this.signatureController.newUnsignedTypedMessage.bind(this.signatureController),processPersonalMessage:this.signatureController.newUnsignedPersonalMessage.bind(this.signatureController),processEncryptionPublicKey:this.encryptionPublicKeyController.newRequestEncryptionPublicKey.bind(this.encryptionPublicKeyController),processDecryptMessage:this.decryptMessageController.newRequestDecryptMessage.bind(this.decryptMessageController),getPendingNonce:this.getPendingNonce.bind(this),getPendingTransactionByHash:e=>this.txController.getTransactions({searchCriteria:{hash:e,status:B.TransactionStatus.submitted}})[0]}),this.on("update",(e=>this._onStateUpdate(e)));const he={AccountTracker:this.accountTracker.store,TxController:this.txController.memStore,TokenRatesController:this.tokenRatesController,DecryptMessageController:this.decryptMessageController,EncryptionPublicKeyController:this.encryptionPublicKeyController,SignatureController:this.signatureController,SwapsController:this.swapsController.store,EnsController:this.ensController.store,ApprovalController:this.approvalController};this.store.updateStructure({AppStateController:this.appStateController.store,AppMetadataController:this.appMetadataController.store,TransactionController:this.txController.store,KeyringController:this.keyringController.store,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,NetworkController:this.networkController,CachedBalancesController:this.cachedBalancesController.store,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,IncomingTransactionsController:this.incomingTransactionsController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,BackupController:this.backupController,AnnouncementController:this.announcementController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,PhishingController:this.phishingController,SnapController:this.snapController,CronjobController:this.cronjobController,SnapsRegistry:this.snapsRegistry,NotificationController:this.notificationController,...he}),this.memStore=new ie.default({config:{AppStateController:this.appStateController.store,AppMetadataController:this.appMetadataController.store,NetworkController:this.networkController,CachedBalancesController:this.cachedBalancesController.store,KeyringController:this.keyringController.memStore,PreferencesController:this.preferencesController.store,MetaMetricsController:this.metaMetricsController.store,AddressBookController:this.addressBookController,CurrencyController:this.currencyRateController,AlertController:this.alertController.store,OnboardingController:this.onboardingController.store,IncomingTransactionsController:this.incomingTransactionsController.store,PermissionController:this.permissionController,PermissionLogController:this.permissionLogController.store,SubjectMetadataController:this.subjectMetadataController,BackupController:this.backupController,AnnouncementController:this.announcementController,GasFeeController:this.gasFeeController,TokenListController:this.tokenListController,TokensController:this.tokensController,SmartTransactionsController:this.smartTransactionsController,NftController:this.nftController,SnapController:this.snapController,CronjobController:this.cronjobController,SnapsRegistry:this.snapsRegistry,NotificationController:this.notificationController,...he},controllerMessenger:this.controllerMessenger});const pe=[this.accountTracker.resetState,this.txController.resetState,this.decryptMessageController.resetState.bind(this.decryptMessageController),this.encryptionPublicKeyController.resetState.bind(this.encryptionPublicKeyController),this.signatureController.resetState.bind(this.signatureController),this.swapsController.resetState,this.ensController.resetState,this.approvalController.clear.bind(this.approvalController)];re.isManifestV3?!0===r&&(this.resetStates(pe),this.extension.storage.session.set({isFirstMetaMaskControllerSetup:!1})):this.resetStates(pe),!this.isUnlocked()&&this.onboardingController.store.getState().completedOnboarding?this._loginUser():this._startUISync(),this.extension.runtime.getPlatformInfo().then((({os:e})=>{this.appStateController.setBrowserEnvironment(e,this.extension.runtime.getBrowserInfo===undefined?"chrome":"firefox")})),this.setupControllerEventSubscriptions(),this.publicConfigStore=this.createPublicConfigStore(),this.extension.runtime.onMessageExternal.addListener(oe.onMessageReceived),(0,oe.checkForMultipleVersionsRunning)()}triggerNetworkrequests(){this.accountTracker.start(),this.incomingTransactionsController.start(),this.preferencesController.store.getState().useCurrencyRateCheck&&this.currencyRateController.start(),this.preferencesController.store.getState().useTokenDetection&&this.tokenListController.start()}stopNetworkRequests(){this.accountTracker.stop(),this.incomingTransactionsController.stop(),this.preferencesController.store.getState().useCurrencyRateCheck&&this.currencyRateController.stop(),this.preferencesController.store.getState().useTokenDetection&&this.tokenListController.stop()}canUseHardwareWallets(){return!re.isManifestV3||!1}resetStates(e){e.forEach((e=>{try{e()}catch(e){console.error(e)}}))}handleSnapRequest(e){return this._trackSnapExportUsage(e.snapId,e.handler),this.controllerMessenger.call("SnapController:handleRequest",e)}getSnapPermissionSpecifications(){return{...(0,De.buildSnapEndowmentSpecifications)(),...(0,De.buildSnapRestrictedMethodSpecifications)({encrypt:U.encrypt,decrypt:U.decrypt,clearSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:clearSnapState"),getMnemonic:this.getPrimaryKeyringMnemonic.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:get"),handleSnapRpcRequest:this.handleSnapRequest.bind(this),getSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getSnapState"),showDialog:(e,t,r,n)=>this.approvalController.addAndShowApprovalRequest({origin:e,type:z.SNAP_DIALOG_TYPES[t],requestData:{content:r,placeholder:n}}),showNativeNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showNativeNotification",e,t.message),showInAppNotification:(e,t)=>this.controllerMessenger.call("RateLimitController:call",e,"showInAppNotification",e,t.message),updateSnapState:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:updateSnapState")})}}dismissNotifications(e){this.notificationController.dismiss(e)}markNotificationsAsRead(e){this.notificationController.markRead(e)}setupControllerEventSubscriptions(){const e=async(e,t)=>{this.isUnlocked()&&this.notifyConnections(e,{method:De.NOTIFICATION_NAMES.accountsChanged,params:t.length<2?t:await this.getPermittedAccounts(e)}),this.permissionLogController.updateAccountsHistory(e,t)};let t;this.preferencesController.store.subscribe((async({selectedAddress:r})=>{if(r&&r!==t){t=r;const n=(0,De.getPermittedAccountsByOrigin)(this.permissionController.state);for(const[t,s]of n.entries())s.includes(r)&&e(t,s)}})),this.controllerMessenger.subscribe(`${this.permissionController.name}:stateChange`,(async(t,r)=>{const n=(0,De.getChangedAccounts)(t,r);for(const[t,r]of n.entries())e(t,r)}),De.getPermittedAccountsByOrigin),this.controllerMessenger.subscribe(`${this.snapController.name}:snapAdded`,((e,t=null)=>{const{manifest:{proposedName:r},version:n}=e;this.subjectMetadataController.addSubjectMetadata({subjectType:O.SubjectType.Snap,name:r,origin:e.id,version:n,svgIcon:t})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapInstalled`,(e=>{this.metaMetricsController.trackEvent({event:Q.MetaMetricsEventName.SnapInstalled,category:Q.MetaMetricsEventCategory.Snaps,properties:{snap_id:e.id,version:e.version}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapUpdated`,((e,t)=>{this.metaMetricsController.trackEvent({event:Q.MetaMetricsEventName.SnapUpdated,category:Q.MetaMetricsEventCategory.Snaps,properties:{snap_id:e.id,old_version:t,new_version:e.version}})})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapTerminated`,(e=>{const t=Object.values(this.approvalController.state.pendingApprovals).filter((t=>t.origin===e.id&&t.type.startsWith(V.RestrictedMethods.snap_dialog)));for(const e of t)this.approvalController.reject(e.id,new Error("Snap was terminated."))})),this.controllerMessenger.subscribe(`${this.snapController.name}:snapRemoved`,(e=>{const t=Object.values(this.notificationController.state.notifications).reduce(((t,r)=>(r.origin===e.id&&t.push(r.id),t)),[]);this.dismissNotifications(t),this.metaMetricsController.trackEvent({event:Q.MetaMetricsEventName.SnapUninstalled,category:Q.MetaMetricsEventCategory.Snaps,properties:{snap_id:e.id,version:e.version}})}))}createPublicConfigStore(){const e=new o.ObservableStore,{networkController:t}=this;function r(r){const{chainId:n}=t.state.providerConfig;r.networkStatus===K.NetworkStatus.Available&&e.putState(function(e,{isUnlocked:t,networkId:r}){return{isUnlocked:t,chainId:e,networkVersion:r??"loading"}}(n,r))}return this.on("update",r),r(this.getState()),e}async getProviderState(e){return{isUnlocked:this.isUnlocked(),...this.getProviderNetworkState(),accounts:await this.getPermittedAccounts(e)}}getProviderNetworkState(e){const{networkId:t}=e||this.getState();return{chainId:this.networkController.state.providerConfig.chainId,networkVersion:t??"loading"}}getState(){const{vault:e}=this.keyringController.store.getState(),t=Boolean(e),r=this.memStore.getFlatState();return{isInitialized:t,...r,snapStates:{},snaps:Object.values(r.snaps??{}).reduce(((e,t)=>{const{sourceCode:r,...n}=t;return e[t.id]=n,e}),{})}}getApi(){const{addressBookController:e,alertController:t,appStateController:r,nftController:n,nftDetectionController:s,currencyRateController:o,detectTokensController:i,ensController:a,gasFeeController:l,metaMetricsController:c,networkController:d,announcementController:u,onboardingController:h,permissionController:p,preferencesController:m,qrHardwareKeyring:g,swapsController:f,tokensController:C,smartTransactionsController:v,txController:b,assetsContractController:w,backupController:k,approvalController:y}=this;return{getState:this.getState.bind(this),setCurrentCurrency:o.setCurrentCurrency.bind(o),setUseBlockie:m.setUseBlockie.bind(m),setUseNonceField:m.setUseNonceField.bind(m),setUsePhishDetect:m.setUsePhishDetect.bind(m),setUseMultiAccountBalanceChecker:m.setUseMultiAccountBalanceChecker.bind(m),setUseTokenDetection:m.setUseTokenDetection.bind(m),setUseNftDetection:m.setUseNftDetection.bind(m),setUseCurrencyRateCheck:m.setUseCurrencyRateCheck.bind(m),setOpenSeaEnabled:m.setOpenSeaEnabled.bind(m),setIpfsGateway:m.setIpfsGateway.bind(m),setParticipateInMetaMetrics:c.setParticipateInMetaMetrics.bind(c),setCurrentLocale:m.setCurrentLocale.bind(m),markPasswordForgotten:this.markPasswordForgotten.bind(this),unMarkPasswordForgotten:this.unMarkPasswordForgotten.bind(this),getRequestAccountTabIds:this.getRequestAccountTabIds,getOpenMetamaskTabsIds:this.getOpenMetamaskTabsIds,markNotificationPopupAsAutomaticallyClosed:()=>this.notificationManager.markAsAutomaticallyClosed(),requestUserApproval:y.addAndShowApprovalRequest.bind(y),addNewAccount:this.addNewAccount.bind(this),verifySeedPhrase:this.verifySeedPhrase.bind(this),resetAccount:this.resetAccount.bind(this),removeAccount:this.removeAccount.bind(this),importAccountWithStrategy:this.importAccountWithStrategy.bind(this),connectHardware:this.connectHardware.bind(this),forgetDevice:this.forgetDevice.bind(this),checkHardwareStatus:this.checkHardwareStatus.bind(this),unlockHardwareWalletAccount:this.unlockHardwareWalletAccount.bind(this),setLedgerTransportPreference:this.setLedgerTransportPreference.bind(this),attemptLedgerTransportCreation:this.attemptLedgerTransportCreation.bind(this),establishLedgerTransportPreference:this.establishLedgerTransportPreference.bind(this),submitQRHardwareCryptoHDKey:g.submitCryptoHDKey.bind(g),submitQRHardwareCryptoAccount:g.submitCryptoAccount.bind(g),cancelSyncQRHardware:g.cancelSync.bind(g),submitQRHardwareSignature:g.submitSignature.bind(g),cancelQRHardwareSignRequest:g.cancelSignRequest.bind(g),submitPassword:this.submitPassword.bind(this),verifyPassword:this.verifyPassword.bind(this),setProviderType:d.setProviderType.bind(d),rollbackToPreviousProvider:d.rollbackToPreviousProvider.bind(d),removeNetworkConfiguration:d.removeNetworkConfiguration.bind(d),setActiveNetwork:d.setActiveNetwork.bind(d),upsertNetworkConfiguration:this.networkController.upsertNetworkConfiguration.bind(this.networkController),getCurrentNetworkEIP1559Compatibility:this.networkController.getEIP1559Compatibility.bind(this.networkController),setSelectedAddress:m.setSelectedAddress.bind(m),addToken:C.addToken.bind(C),updateTokenType:C.updateTokenType.bind(C),setAccountLabel:m.setAccountLabel.bind(m),setFeatureFlag:m.setFeatureFlag.bind(m),setPreference:m.setPreference.bind(m),addKnownMethodData:m.addKnownMethodData.bind(m),setDismissSeedBackUpReminder:m.setDismissSeedBackUpReminder.bind(m),setDisabledRpcMethodPreference:m.setDisabledRpcMethodPreference.bind(m),getRpcMethodPreferences:m.getRpcMethodPreferences.bind(m),setAdvancedGasFee:m.setAdvancedGasFee.bind(m),setTheme:m.setTheme.bind(m),setTransactionSecurityCheckEnabled:m.setTransactionSecurityCheckEnabled.bind(m),getTokenStandardAndDetails:this.getTokenStandardAndDetails.bind(this),addNft:n.addNft.bind(n),addNftVerifyOwnership:n.addNftVerifyOwnership.bind(n),removeAndIgnoreNft:n.removeAndIgnoreNft.bind(n),removeNft:n.removeNft.bind(n),checkAndUpdateAllNftsOwnershipStatus:n.checkAndUpdateAllNftsOwnershipStatus.bind(n),checkAndUpdateSingleNftOwnershipStatus:n.checkAndUpdateSingleNftOwnershipStatus.bind(n),isNftOwner:n.isNftOwner.bind(n),setAddressBook:e.set.bind(e),removeFromAddressBook:e.delete.bind(e),setLastActiveTime:r.setLastActiveTime.bind(r),setDefaultHomeActiveTabName:r.setDefaultHomeActiveTabName.bind(r),setConnectedStatusPopoverHasBeenShown:r.setConnectedStatusPopoverHasBeenShown.bind(r),setRecoveryPhraseReminderHasBeenShown:r.setRecoveryPhraseReminderHasBeenShown.bind(r),setRecoveryPhraseReminderLastShown:r.setRecoveryPhraseReminderLastShown.bind(r),setTermsOfUseLastAgreed:r.setTermsOfUseLastAgreed.bind(r),setSnapsInstallPrivacyWarningShownStatus:r.setSnapsInstallPrivacyWarningShownStatus.bind(r),setOutdatedBrowserWarningLastShown:r.setOutdatedBrowserWarningLastShown.bind(r),setShowTestnetMessageInDropdown:r.setShowTestnetMessageInDropdown.bind(r),setShowBetaHeader:r.setShowBetaHeader.bind(r),setShowProductTour:r.setShowProductTour.bind(r),updateNftDropDownState:r.updateNftDropDownState.bind(r),setFirstTimeUsedNetwork:r.setFirstTimeUsedNetwork.bind(r),tryReverseResolveAddress:a.reverseResolveAddress.bind(a),setLocked:this.setLocked.bind(this),createNewVaultAndKeychain:this.createNewVaultAndKeychain.bind(this),createNewVaultAndRestore:this.createNewVaultAndRestore.bind(this),exportAccount:this.exportAccount.bind(this),updateTransaction:b.updateTransaction.bind(b),approveTransactionsWithSameNonce:b.approveTransactionsWithSameNonce.bind(b),createCancelTransaction:this.createCancelTransaction.bind(this),createSpeedUpTransaction:this.createSpeedUpTransaction.bind(this),estimateGas:this.estimateGas.bind(this),getNextNonce:this.getNextNonce.bind(this),addUnapprovedTransaction:b.addUnapprovedTransaction.bind(b),createTransactionEventFragment:b.createTransactionEventFragment.bind(b),getTransactions:b.getTransactions.bind(b),updateEditableParams:b.updateEditableParams.bind(b),updateTransactionGasFees:b.updateTransactionGasFees.bind(b),updateTransactionSendFlowHistory:b.updateTransactionSendFlowHistory.bind(b),updatePreviousGasParams:b.updatePreviousGasParams.bind(b),decryptMessage:this.decryptMessageController.decryptMessage.bind(this.decryptMessageController),decryptMessageInline:this.decryptMessageController.decryptMessageInline.bind(this.decryptMessageController),cancelDecryptMessage:this.decryptMessageController.cancelDecryptMessage.bind(this.decryptMessageController),encryptionPublicKey:this.encryptionPublicKeyController.encryptionPublicKey.bind(this.encryptionPublicKeyController),cancelEncryptionPublicKey:this.encryptionPublicKeyController.cancelEncryptionPublicKey.bind(this.encryptionPublicKeyController),setSeedPhraseBackedUp:h.setSeedPhraseBackedUp.bind(h),completeOnboarding:h.completeOnboarding.bind(h),setFirstTimeFlowType:h.setFirstTimeFlowType.bind(h),setAlertEnabledness:t.setAlertEnabledness.bind(t),setUnconnectedAccountAlertShown:t.setUnconnectedAccountAlertShown.bind(t),setWeb3ShimUsageAlertDismissed:t.setWeb3ShimUsageAlertDismissed.bind(t),removePermissionsFor:this.removePermissionsFor,approvePermissionsRequest:this.acceptPermissionsRequest,rejectPermissionsRequest:this.rejectPermissionsRequest,...(0,De.getPermissionBackgroundApiMethods)(p),removeSnapError:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:removeSnapError"),disableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:disable"),enableSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:enable"),removeSnap:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:remove"),handleSnapRequest:this.handleSnapRequest.bind(this),revokeDynamicSnapPermissions:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:revokeDynamicPermissions"),dismissNotifications:this.dismissNotifications.bind(this),markNotificationsAsRead:this.markNotificationsAsRead.bind(this),fetchAndSetQuotes:f.fetchAndSetQuotes.bind(f),setSelectedQuoteAggId:f.setSelectedQuoteAggId.bind(f),resetSwapsState:f.resetSwapsState.bind(f),setSwapsTokens:f.setSwapsTokens.bind(f),clearSwapsQuotes:f.clearSwapsQuotes.bind(f),setApproveTxId:f.setApproveTxId.bind(f),setTradeTxId:f.setTradeTxId.bind(f),setSwapsTxGasPrice:f.setSwapsTxGasPrice.bind(f),setSwapsTxGasLimit:f.setSwapsTxGasLimit.bind(f),setSwapsTxMaxFeePerGas:f.setSwapsTxMaxFeePerGas.bind(f),setSwapsTxMaxFeePriorityPerGas:f.setSwapsTxMaxFeePriorityPerGas.bind(f),safeRefetchQuotes:f.safeRefetchQuotes.bind(f),stopPollingForQuotes:f.stopPollingForQuotes.bind(f),setBackgroundSwapRouteState:f.setBackgroundSwapRouteState.bind(f),resetPostFetchState:f.resetPostFetchState.bind(f),setSwapsErrorKey:f.setSwapsErrorKey.bind(f),setInitialGasEstimate:f.setInitialGasEstimate.bind(f),setCustomApproveTxData:f.setCustomApproveTxData.bind(f),setSwapsLiveness:f.setSwapsLiveness.bind(f),setSwapsFeatureFlags:f.setSwapsFeatureFlags.bind(f),setSwapsUserFeeLevel:f.setSwapsUserFeeLevel.bind(f),setSwapsQuotesPollingLimitEnabled:f.setSwapsQuotesPollingLimitEnabled.bind(f),setSmartTransactionsOptInStatus:v.setOptInState.bind(v),fetchSmartTransactionFees:v.getFees.bind(v),clearSmartTransactionFees:v.clearFees.bind(v),submitSignedTransactions:v.submitSignedTransactions.bind(v),cancelSmartTransaction:v.cancelSmartTransaction.bind(v),fetchSmartTransactionsLiveness:v.fetchLiveness.bind(v),updateSmartTransaction:v.updateSmartTransaction.bind(v),setStatusRefreshInterval:v.setStatusRefreshInterval.bind(v),trackMetaMetricsEvent:c.trackEvent.bind(c),trackMetaMetricsPage:c.trackPage.bind(c),createEventFragment:c.createEventFragment.bind(c),updateEventFragment:c.updateEventFragment.bind(c),finalizeEventFragment:c.finalizeEventFragment.bind(c),resolvePendingApproval:this.resolvePendingApproval,rejectPendingApproval:this.rejectPendingApproval,updateViewedNotifications:u.updateViewed.bind(u),getGasFeeEstimatesAndStartPolling:l.getGasFeeEstimatesAndStartPolling.bind(l),disconnectGasFeeEstimatePoller:l.disconnectPoller.bind(l),getGasFeeTimeEstimate:l.getTimeEstimate.bind(l),addPollingTokenToAppState:r.addPollingToken.bind(r),removePollingTokenFromAppState:r.removePollingToken.bind(r),backupUserData:k.backupUserData.bind(k),restoreUserData:k.restoreUserData.bind(k),detectNewTokens:i.detectNewTokens.bind(i),detectNfts:s.detectNfts.bind(s),addDetectedTokens:C.addDetectedTokens.bind(C),addImportedTokens:C.addTokens.bind(C),ignoreTokens:C.ignoreTokens.bind(C),getBalancesInSingleCall:w.getBalancesInSingleCall.bind(w),throwTestError:this.throwTestError.bind(this)}}async exportAccount(e,t){return await this.verifyPassword(t),this.keyringController.exportAccount(e,t)}async getTokenStandardAndDetails(e,t,r){var n,s,o,i;const{tokenList:a}=this.tokenListController.state,{tokens:l}=this.tokensController.state,c={...ee.STATIC_MAINNET_TOKEN_LIST[e.toLowerCase()]||{},...a[e.toLowerCase()]||{},...l.find((({address:t})=>(0,X.isEqualCaseInsensitive)(t,e)))||{}},d=(0,X.isEqualCaseInsensitive)(c.standard,B.TokenStandard.ERC20)||!0===c.erc20,u=!(r||(0,X.isEqualCaseInsensitive)(c.standard,B.TokenStandard.ERC1155)||(0,X.isEqualCaseInsensitive)(c.standard,B.TokenStandard.ERC721)||c.erc721),h=c.decimals!==undefined&&c.symbol;let p;if(d||u&&h)try{const r=await(0,J.fetchTokenBalance)(e,t,this.provider);p={address:e,balance:r,standard:B.TokenStandard.ERC20,decimals:c.decimals,symbol:c.symbol}}catch(e){f.default.warning(`Failed to get token balance. Error: ${e}`)}return p===undefined&&(p=await this.assetsContractController.getTokenStandardAndDetails(e,t,r)),{...p,decimals:null===(n=p)||void 0===n||null===(s=n.decimals)||void 0===s?void 0:s.toString(10),balance:null===(o=p)||void 0===o||null===(i=o.balance)||void 0===i?void 0:i.toString(10)}}async createNewVaultAndKeychain(e){const t=await this.createVaultMutex.acquire();try{let t;if((await this.keyringController.getAccounts()).length>0)t=await this.keyringController.fullUpdate();else{t=await this.keyringController.createNewVaultAndKeychain(e);const r=await this.keyringController.getAccounts();this.preferencesController.setAddresses(r),this.selectFirstIdentity()}return t}finally{t()}}async createNewVaultAndRestore(e,r){const n=await this.createVaultMutex.acquire();try{let n,s;const o=t.from(r),{keyringController:i}=this;this.preferencesController.setAddresses([]),this.permissionController.clearState(),this.snapController.clearState(),this.notificationController.clear(),this.accountTracker.clearAccounts(),this.cachedBalancesController.clearCachedBalances(),this.txController.txStateManager.clearUnapprovedTxs();const a=await i.createNewVaultAndRestore(e,o),l=new k.default(this.provider);n=await i.getAccounts(),s=await this.getBalance(n[n.length-1],l);const[c]=i.getKeyringsByType(H.KeyringType.hdKeyTree);if(!c)throw new Error("MetamaskController - No HD Key Tree found");for(;"0x0"!==s;)await i.addNewAccount(c),n=await i.getAccounts(),s=await this.getBalance(n[n.length-1],l);n.length>1&&"0x0"===s&&(await this.removeAccount(n[n.length-1]),n=await i.getAccounts());const d=this.preferencesController.getLedgerTransportPreference();return this.setLedgerTransportPreference(d),this.preferencesController.setAddresses(n),this.selectFirstIdentity(),a}finally{n()}}getBalance(e,t){return new Promise(((r,n)=>{const s=this.accountTracker.store.getState().accounts[e];s&&s.balance?r(s.balance):t.getBalance(e,((e,t)=>{e?(n(e),f.default.error(e)):r(t||"0x0")}))}))}async submitPassword(e){await this.keyringController.submitPassword(e);try{await this.blockTracker.checkForLatestBlock()}catch(e){f.default.error("Error while unlocking extension.",e)}const t=this.preferencesController.getLedgerTransportPreference();return this.setLedgerTransportPreference(t),this.keyringController.fullUpdate()}async _loginUser(){try{const e=null;e?await this.submitPassword(e):re.isManifestV3&&await this.submitEncryptionKey(),await this.accountTracker._updateAccounts()}finally{this._startUISync()}}_startUISync(){this.emit("startUISync"),this.startUISync=!0,this.memStore.subscribe(this.sendUpdate.bind(this))}async submitEncryptionKey(){try{const{loginToken:e,loginSalt:t}=await this.extension.storage.session.get(["loginToken","loginSalt"]);if(e&&t){const{vault:r}=this.keyringController.store.getState();if(JSON.parse(r).salt!==t)return console.warn("submitEncryptionKey: Stored salt and vault salt do not match"),void await this.clearLoginArtifacts();await this.keyringController.submitEncryptionKey(e,t)}}catch(e){throw await this.clearLoginArtifacts(),e}}async clearLoginArtifacts(){await this.extension.storage.session.remove(["loginToken","loginSalt"])}async verifyPassword(e){await this.keyringController.verifyPassword(e)}selectFirstIdentity(){const{identities:e}=this.preferencesController.store.getState(),[t]=Object.keys(e);this.preferencesController.setSelectedAddress(t)}getPrimaryKeyringMnemonic(){const[e]=this.keyringController.getKeyringsByType(H.KeyringType.hdKeyTree);if(!e.mnemonic)throw new Error("Primary keyring mnemonic unavailable.");return e.mnemonic}async getKeyringForDevice(e,t=null){var r,n,s,o;const i=null===(r=this.opts.overrides)||void 0===r?void 0:r.keyrings;let a=null;if(e!==G.HardwareDeviceNames.QR&&!this.canUseHardwareWallets())throw new Error("Hardware wallets are not supported on this version.");switch(e){case G.HardwareDeviceNames.trezor:a=(null==i||null===(n=i.trezor)||void 0===n?void 0:n.type)||C.default.type;break;case G.HardwareDeviceNames.ledger:a=(null==i||null===(s=i.ledger)||void 0===s?void 0:s.type)||v.default.type;break;case G.HardwareDeviceNames.qr:a=w.MetaMaskKeyring.type;break;case G.HardwareDeviceNames.lattice:a=(null==i||null===(o=i.lattice)||void 0===o?void 0:o.type)||b.default.type;break;default:throw new Error("MetamaskController:getKeyringForDevice - Unknown device")}let[l]=await this.keyringController.getKeyringsByType(a);if(l||(l=await this.keyringController.addNewKeyring(a)),t&&l.setHdPath&&l.setHdPath(t),e===G.HardwareDeviceNames.lattice&&(l.appName="MetaMask"),e===G.HardwareDeviceNames.trezor){const e=l.getModel();this.appStateController.setTrezorModel(e)}return l.network=this.networkController.state.providerConfig.type,l}async attemptLedgerTransportCreation(){const e=await this.getKeyringForDevice(G.HardwareDeviceNames.ledger);return await e.attemptMakeApp()}async establishLedgerTransportPreference(){const e=this.preferencesController.getLedgerTransportPreference();return await this.setLedgerTransportPreference(e)}async connectHardware(e,t,r){const n=await this.getKeyringForDevice(e,r);let s=[];switch(t){case-1:s=await n.getPreviousPage();break;case 1:s=await n.getNextPage();break;default:s=await n.getFirstPage()}const o=await this.keyringController.getAccounts(),i=[...new Set(o.concat(s.map((e=>e.address.toLowerCase()))))];return this.accountTracker.syncWithAddresses(i),s}async checkHardwareStatus(e,t){return(await this.getKeyringForDevice(e,t)).isUnlocked()}async forgetDevice(e){return(await this.getKeyringForDevice(e)).forgetDevice(),!0}async getAccountType(e){switch((await this.keyringController.getKeyringForAccount(e)).type){case H.KeyringType.trezor:case H.KeyringType.lattice:case H.KeyringType.qr:case H.KeyringType.ledger:return"hardware";case H.KeyringType.imported:return"imported";default:return"MetaMask"}}async getDeviceModel(e){const t=await this.keyringController.getKeyringForAccount(e);switch(t.type){case H.KeyringType.trezor:return t.getModel();case H.KeyringType.qr:return t.getName();case H.KeyringType.ledger:return G.HardwareDeviceNames.ledger;case H.KeyringType.lattice:return G.HardwareDeviceNames.lattice;default:return"N/A"}}getAccountLabel(e,t,r){return`${e[0].toUpperCase()}${e.slice(1)} ${parseInt(t,10)+1} ${r||""}`.trim()}async unlockHardwareWalletAccount(e,t,r,n){const s=await this.getKeyringForDevice(t,r);s.setAccountToUnlock(e);const o=await this.keyringController.getAccounts(),i=await this.keyringController.addNewAccount(s),a=await this.keyringController.getAccounts();this.preferencesController.setAddresses(a),a.forEach((r=>{if(!o.includes(r)){const o=this.getAccountLabel(t===G.HardwareDeviceNames.qr?s.getName():t,e,n);this.preferencesController.setAccountLabel(r,o),this.preferencesController.setSelectedAddress(r)}}));const{identities:l}=this.preferencesController.store.getState();return{...i,identities:l}}async addNewAccount(e){this.appStateController.store.getState()[se.ACTION_QUEUE_METRICS_E2E_TEST];const[t]=this.keyringController.getKeyringsByType(H.KeyringType.hdKeyTree);if(!t)throw new Error("MetamaskController - No HD Key Tree found");const{keyringController:r}=this,{identities:n}=this.preferencesController.store.getState();if(Object.keys(n).length===e){const e=await r.getAccounts(),n=await r.addNewAccount(t),s=await r.getAccounts();await this.verifySeedPhrase(),this.preferencesController.setAddresses(s),s.forEach((t=>{e.includes(t)||this.preferencesController.setSelectedAddress(t)}));const{identities:o}=this.preferencesController.store.getState();return{...n,identities:o}}return{...r.memStore.getState(),identities:n}}async verifySeedPhrase(){const[e]=this.keyringController.getKeyringsByType(H.KeyringType.hdKeyTree);if(!e)throw new Error("MetamaskController - No HD Key Tree found");const r=await e.serialize(),n=t.from(r.mnemonic),s=await e.getAccounts();if(s.length<1)throw new Error("MetamaskController - No accounts found");try{return await Pe.default.verifyAccounts(s,n),Array.from(n.values())}catch(e){throw f.default.error(e.message),e}}async resetAccount(){const e=this.preferencesController.getSelectedAddress();return this.txController.wipeTransactions(e),this.networkController.resetConnection(),e}async getPermittedAccounts(e,{suppressUnauthorizedError:t=!0}={}){try{return await this.permissionController.executeRestrictedMethod(e,V.RestrictedMethods.eth_accounts)}catch(e){if(t&&e.code===m.errorCodes.provider.unauthorized)return[];throw e}}removeAllAccountPermissions(e){this.permissionController.updatePermissionsByCaveat(V.CaveatTypes.restrictReturnedAccounts,(t=>De.CaveatMutatorFactories[V.CaveatTypes.restrictReturnedAccounts].removeAccount(e,t)))}async removeAccount(e){this.removeAllAccountPermissions(e),this.preferencesController.removeAddress(e),this.accountTracker.removeAccount([e]);const t=await this.keyringController.getKeyringForAccount(e);await this.keyringController.removeAccount(e);const r=t?await t.getAccounts():{};var n;0===(null==r?void 0:r.length)&&(null===(n=t.destroy)||void 0===n||n.call(t));return e}async importAccountWithStrategy(e,t){const r=await Ee.default.importAccount(e,t),n=await this.keyringController.addNewKeyring(H.KeyringType.imported,[r]),[s]=await n.getAccounts(),o=await this.keyringController.getAccounts();this.preferencesController.setAddresses(o),this.preferencesController.setSelectedAddress(s)}async newUnapprovedTransaction(e,t){return await this.txController.newUnapprovedTransaction(e,t)}async getCurrentAccountEIP1559Compatibility(){return!0}async createCancelTransaction(e,t,r){await this.txController.createCancelTransaction(e,t,r);return this.getState()}async createSpeedUpTransaction(e,t,r){await this.txController.createSpeedUpTransaction(e,t,r);return this.getState()}estimateGas(e){return new Promise(((t,r)=>this.txController.txGasUtil.query.estimateGas(e,((e,n)=>e?r(e):t(n.toString(16))))))}markPasswordForgotten(){this.preferencesController.setPasswordForgotten(!0),this.sendUpdate()}unMarkPasswordForgotten(){this.preferencesController.setPasswordForgotten(!1),this.sendUpdate()}setupUntrustedCommunication({connectionStream:e,sender:t,subjectType:r}){const{usePhishDetect:n}=this.preferencesController.store.getState();let s;if(s=r||(t.id&&t.id!==this.extension.runtime.id?O.SubjectType.Extension:O.SubjectType.Website),t.url){const{hostname:r}=new URL(t.url);this.phishingController.maybeUpdateState();const s=this.phishingController.test(r);if(n&&null!=s&&s.result)return this.sendPhishingWarning(e,r),void this.metaMetricsController.trackEvent({event:Q.MetaMetricsEventName.PhishingPageDisplayed,category:Q.MetaMetricsEventCategory.Phishing,properties:{url:r}})}const o=(0,me.setupMultiplex)(e);this.setupProviderConnection(o.createStream("metamask-provider"),t,s),t.url&&this.setupPublicConfig(o.createStream("publicConfig"))}setupTrustedCommunication(e,t){const r=(0,me.setupMultiplex)(e);this.setupControllerConnection(r.createStream("controller")),this.setupProviderConnection(r.createStream("provider"),t,O.SubjectType.Internal)}setupPhishingCommunication({connectionStream:e}){const{usePhishDetect:t}=this.preferencesController.store.getState();if(!t)return;const r=(0,me.setupMultiplex)(e).createStream("metamask-phishing-safelist");r.on("data",(0,Ie.default)({safelistPhishingDomain:this.safelistPhishingDomain.bind(this),backToSafetyPhishingWarning:this.backToSafetyPhishingWarning.bind(this)},r))}sendPhishingWarning(e,t){(0,me.setupMultiplex)(e).createStream("phishing").write({hostname:t})}setupControllerConnection(e){const t=this.getApi();this.activeControllerConnections+=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),e.on("data",(0,Ie.default)(t,e,this.store,this.localStoreApiWrapper));const r=t=>{e._writableState.ended||e.write({jsonrpc:"2.0",method:"sendUpdate",params:[t]})};this.on("update",r);const n=()=>{e._writableState.ended||e.write({jsonrpc:"2.0",method:"startUISync"})};this.startUISync?n():this.once("startUISync",n),e.on("end",(()=>{this.activeControllerConnections-=1,this.emit("controllerConnectionChanged",this.activeControllerConnections),this.removeListener("update",r)}))}setupProviderConnection(e,t,r){let n,o;n=r===O.SubjectType.Internal?z.ORIGIN_METAMASK:r===O.SubjectType.Snap?t.snapId:new URL(t.url).origin,t.id&&t.id!==this.extension.runtime.id&&this.subjectMetadataController.addSubjectMetadata({origin:n,extensionId:t.id,subjectType:O.SubjectType.Extension}),t.tab&&t.tab.id&&(o=t.tab.id);const i=this.setupProviderEngine({origin:n,sender:t,subjectType:r,tabId:o}),a=(0,l.createEngineStream)({engine:i}),c=this.addConnection(n,{engine:i});(0,s.default)(e,a,e,(e=>{i._middleware.forEach((e=>{e.destroy&&"function"==typeof e.destroy&&e.destroy()})),c&&this.removeConnection(n,c),e&&f.default.error(e)}))}setupSnapProvider(e,t){this.setupUntrustedCommunication({connectionStream:t,sender:{snapId:e},subjectType:O.SubjectType.Snap})}setupProviderEngine({origin:e,subjectType:t,sender:r,tabId:n}){const s=new a.JsonRpcEngine,{blockTracker:o,provider:i}=this,l=(0,h.default)({provider:i,blockTracker:o}),d=(0,p.default)({provider:i,blockTracker:o});return d.events.on("notification",(e=>s.emit("notification",e))),re.isManifestV3&&s.push((0,le.default)()),s.push((0,ue.default)({origin:e})),n&&s.push((0,he.default)({tabId:n})),s.push((0,ce.default)({origin:e})),s.push(this.permissionLogController.createMiddleware()),s.push((0,xe.default)({trackEvent:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getMetricsState:this.metaMetricsController.store.getState.bind(this.metaMetricsController.store),securityProviderRequest:this.securityProviderRequest.bind(this)})),t===O.SubjectType.Website&&s.push((0,pe.default)({location:r.url,registerOnboarding:this.onboardingController.registerOnboarding})),s.push((0,de.createMethodMiddleware)({origin:e,subjectType:t,addSubjectMetadata:this.subjectMetadataController.addSubjectMetadata.bind(this.subjectMetadataController),getProviderState:this.getProviderState.bind(this),getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),handleWatchAssetRequest:this.handleWatchAssetRequest.bind(this),requestUserApproval:this.approvalController.addAndShowApprovalRequest.bind(this.approvalController),startApprovalFlow:this.approvalController.startFlow.bind(this.approvalController),endApprovalFlow:this.approvalController.endFlow.bind(this.approvalController),setApprovalFlowLoadingText:this.approvalController.setFlowLoadingText.bind(this.approvalController),showApprovalSuccess:this.approvalController.success.bind(this.approvalController),showApprovalError:this.approvalController.error.bind(this.approvalController),sendMetrics:this.metaMetricsController.trackEvent.bind(this.metaMetricsController),getAccounts:this.getPermittedAccounts.bind(this,e),getPermissionsForOrigin:this.permissionController.getPermissions.bind(this.permissionController,e),hasPermission:this.permissionController.hasPermission.bind(this.permissionController,e),requestAccountsPermission:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e},{eth_accounts:{}}),requestPermissionsForOrigin:this.permissionController.requestPermissions.bind(this.permissionController,{origin:e}),getCurrentChainId:()=>this.networkController.state.providerConfig.chainId,getCurrentRpcUrl:()=>this.networkController.state.providerConfig.rpcUrl,getNetworkConfigurations:()=>this.networkController.state.networkConfigurations,upsertNetworkConfiguration:this.networkController.upsertNetworkConfiguration.bind(this.networkController),setActiveNetwork:this.networkController.setActiveNetwork.bind(this.networkController),findNetworkConfigurationBy:this.findNetworkConfigurationBy.bind(this),setProviderType:this.networkController.setProviderType.bind(this.networkController),getWeb3ShimUsageState:this.alertController.getWeb3ShimUsageState.bind(this.alertController),setWeb3ShimUsageRecorded:this.alertController.setWeb3ShimUsageRecorded.bind(this.alertController)})),s.push((0,de.createSnapMethodMiddleware)(t===O.SubjectType.Snap,{getUnlockPromise:this.appStateController.getUnlockPromise.bind(this.appStateController),getSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:getPermitted",e),requestPermissions:async t=>await this.permissionController.requestPermissions({origin:e},t),getPermissions:this.permissionController.getPermissions.bind(this.permissionController,e),getAccounts:this.getPermittedAccounts.bind(this,e),installSnaps:this.controllerMessenger.call.bind(this.controllerMessenger,"SnapController:install",e)})),s.push(l),s.push(d.middleware),t!==O.SubjectType.Internal&&s.push(this.permissionController.createPermissionMiddleware({origin:e})),s.push(this.metamaskMiddleware),s.push((0,c.providerAsMiddleware)(i)),s}setupPublicConfig(e){const t=(0,i.storeAsStream)(this.publicConfigStore);(0,s.default)(t,e,(e=>{t.destroy(),e&&f.default.error(e)}))}addConnection(e,{engine:t}){if(e===z.ORIGIN_METAMASK)return null;this.connections[e]||(this.connections[e]={});const r=(0,y.default)();return this.connections[e][r]={engine:t},r}removeConnection(e,t){const r=this.connections[e];r&&(delete r[t],0===Object.keys(r).length&&delete this.connections[e])}removeAllConnections(e){const t=this.connections[e];t&&Object.keys(t).forEach((t=>{this.removeConnection(e,t)}))}notifyConnections(e,t){const r=this.connections[e];r&&Object.values(r).forEach((e=>{e.engine&&e.engine.emit("notification",t)}))}notifyAllConnections(e){const t="function"==typeof e?t=>e(t):()=>e;Object.keys(this.connections).forEach((e=>{Object.values(this.connections[e]).forEach((async r=>{r.engine&&r.engine.emit("notification",await t(e))}))}))}async _onKeyringControllerUpdate(e){const{keyrings:t,encryptionKey:r,encryptionSalt:n}=e,s=t.reduce(((e,{accounts:t})=>e.concat(t)),[]);re.isManifestV3&&await this.extension.storage.session.set({loginToken:r,loginSalt:n}),s.length&&(this.preferencesController.syncAddresses(s),this.accountTracker.syncWithAddresses(s))}_onUnlock(){this.notifyAllConnections((async e=>({method:De.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!0,accounts:await this.getPermittedAccounts(e)}}))),this.unMarkPasswordForgotten(),this.emit("unlock")}_onLock(){this.notifyAllConnections({method:De.NOTIFICATION_NAMES.unlockStateChanged,params:{isUnlocked:!1}}),this.emit("lock")}_onStateUpdate(e){this.isClientOpenAndUnlocked=e.isUnlocked&&this._isClientOpen,this.notifyAllConnections({method:De.NOTIFICATION_NAMES.chainChanged,params:this.getProviderNetworkState(e)})}privateSendUpdate(){this.emit("update",this.getState())}isUnlocked(){return this.keyringController.memStore.getState().isUnlocked}getExternalPendingTransactions(e){return this.smartTransactionsController.getTransactions({addressFrom:e,status:"pending"})}async getPendingNonce(e){const{nonceDetails:t,releaseLock:r}=await this.txController.nonceTracker.getNonceLock(e),n=t.params.highestSuggested;return r(),n}async getNextNonce(e){const t=await this.txController.nonceTracker.getNonceLock(e);return t.releaseLock(),t.nextNonce}throwTestError(e){setTimeout((()=>{const t=new Error(e);throw t.name="TestError",t}))}findNetworkConfigurationBy(e){const{networkConfigurations:t}=this.networkController.state;return Object.values(t).find((t=>Object.keys(e).some((r=>t[r]===e[r]))))||null}async setLedgerTransportPreference(e){if(!this.canUseHardwareWallets())return undefined;const t=this.preferencesController.getLedgerTransportPreference(),r=this.preferencesController.setLedgerTransportPreference(e),n=await this.getKeyringForDevice(G.HardwareDeviceNames.ledger);return null!=n&&n.updateTransportMethod?n.updateTransportMethod(r).catch((e=>{throw this.preferencesController.setLedgerTransportPreference(t),e})):undefined}recordFirstTimeInfo(e){if(!("firstTimeInfo"in e)){const t=this.platform.getVersion();e.firstTimeInfo={version:t,date:Date.now()}}}set isClientOpen(e){this._isClientOpen=e,this.detectTokensController.isOpen=e}onClientClosed(){try{this.gasFeeController.stopPolling(),this.appStateController.clearPollingTokens()}catch(e){console.error(e)}}onEnvironmentTypeClosed(e){const t=z.POLLING_TOKEN_ENVIRONMENT_TYPES[e];this.appStateController.store.getState()[t].forEach((e=>{this.gasFeeController.disconnectPoller(e),this.appStateController.removePollingToken(e,t)}))}safelistPhishingDomain(e){return this.phishingController.bypass(e)}async backToSafetyPhishingWarning(){const e=this.platform.getExtensionURL();await this.platform.switchToAnotherURL(undefined,e)}setLocked(){var e;const[t]=this.keyringController.getKeyringsByType(H.KeyringType.trezor);t&&t.dispose();const[r]=this.keyringController.getKeyringsByType(H.KeyringType.ledger);return null==r||null===(e=r.destroy)||void 0===e||e.call(r),re.isManifestV3&&this.clearLoginArtifacts(),this.keyringController.setLocked()}async securityProviderRequest(e,t){const{currentLocale:r,transactionSecurityCheckEnabled:n}=this.preferencesController.store.getState();if(n){const n=Number((0,ne.hexToDecimal)(this.networkController.state.providerConfig.chainId));try{return await(0,je.securityProviderCheck)(e,t,n,r)}catch(e){throw f.default.error(e.message),e}}return null}}r.default=qe}).call(this)}).call(this,e("buffer").Buffer)}}},{package:"$root$",file:"app/scripts/metamask-controller.js"}],[84,{lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:2,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=2;try{"etherscan"===t.data.config.provider.type&&(t.data.config.provider.type="rpc",t.data.config.provider.rpcTarget="https://rpc.metamask.io/")}catch(e){}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/002.js"}],[85,{lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:3,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=3;try{"https://rawtestrpc.metamask.io/"===t.data.config.provider.rpcTarget&&(t.data.config.provider.rpcTarget="https://testrpc.metamask.io/")}catch(e){}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/003.js"}],[86,{lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:4,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=4;try{if("rpc"!==t.data.config.provider.type)return Promise.resolve(t);switch(t.data.config.provider.rpcTarget){case"https://testrpc.metamask.io/":t.data.config.provider={type:"testnet"};break;case"https://rpc.metamask.io/":t.data.config.provider={type:"mainnet"}}}catch(e){}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/004.js"}],[87,{lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:5,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=5;try{const e=function(e){const{config:t}=e,r={...e,KeyringController:{vault:e.vault,selectedAccount:t.selectedAccount,walletNicknames:e.walletNicknames}};return delete r.vault,delete r.walletNicknames,delete r.config.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #5${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/005.js"}],[88,{lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:6,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=6;try{const e=function(e){const t=e.KeyringController,r={...e,PreferencesController:{selectedAddress:t.selectedAccount}};return delete r.KeyringController.selectedAccount,r}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #6${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/006.js"}],[89,{lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:7,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=7;try{const e=function(e){const t={...e,TransactionManager:{transactions:e.transactions||[],gasMultiplier:e.gasMultiplier||1}};return delete t.transactions,delete t.gasMultiplier,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #7${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/007.js"}],[9,{"../../../shared/constants/alarms":4314,"../../../shared/constants/app":4316,"../../../shared/constants/preferences":4326,"../../../shared/constants/time":4334,"../../../shared/modules/mv3.utils":4356,"../../../ui/helpers/utils/build-types":5073,"../metamask-controller":83,"@metamask/controller-utils":1095,"@metamask/obs-store":1328,events:2336,loglevel:3629,uuid:4260},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=g(e("events")),s=e("@metamask/obs-store"),o=e("uuid"),i=g(e("loglevel")),a=e("@metamask/controller-utils"),l=e("../metamask-controller"),c=e("../../../shared/constants/time"),d=e("../../../shared/constants/alarms"),u=e("../../../shared/modules/mv3.utils"),h=e("../../../ui/helpers/utils/build-types"),p=e("../../../shared/constants/app"),m=e("../../../shared/constants/preferences");function g(e){return e&&e.__esModule?e:{default:e}}class f extends n.default{constructor(e={}){const{addUnlockListener:t,isUnlocked:r,initState:n,onInactiveTimeout:o,preferencesStore:i,qrHardwareStore:a,messenger:l}=e;super(),this.onInactiveTimeout=o||(()=>undefined),this.store=new s.ObservableStore({timeoutMinutes:m.DEFAULT_AUTO_LOCK_TIME_LIMIT,connectedStatusPopoverHasBeenShown:!0,defaultHomeActiveTabName:null,browserEnvironment:{},popupGasPollTokens:[],notificationGasPollTokens:[],fullScreenGasPollTokens:[],recoveryPhraseReminderHasBeenShown:!1,recoveryPhraseReminderLastShown:(new Date).getTime(),outdatedBrowserWarningLastShown:(new Date).getTime(),nftsDetectionNoticeDismissed:!1,showTestnetMessageInDropdown:!0,showBetaHeader:(0,h.isBeta)(),showProductTour:!0,trezorModel:null,currentPopupId:undefined,hadAdvancedGasFeesSetPriorToMigration92_3:!1,...n,qrHardware:{},nftsDropdownState:{},usedNetworks:{"0x1":!0,"0x5":!0,"0x539":!0},serviceWorkerLastActiveTime:0}),this.timer=null,this.isUnlocked=r,this.waitingForUnlock=[],t(this.handleUnlock.bind(this)),i.subscribe((({preferences:e})=>{this.store.getState().timeoutMinutes!==e.autoLockTimeLimit&&this._setInactiveTimeout(e.autoLockTimeLimit)})),a.subscribe((e=>{this.store.updateState({qrHardware:e})}));const{preferences:c}=i.getState();this._setInactiveTimeout(c.autoLockTimeLimit),this.messagingSystem=l,this._approvalRequestId=null}getUnlockPromise(e){return new Promise((t=>{this.isUnlocked()?t():this.waitForUnlock(t,e)}))}waitForUnlock(e,t){this.waitingForUnlock.push({resolve:e}),this.emit(l.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE),t&&this._requestApproval()}handleUnlock(){if(this.waitingForUnlock.length>0){for(;this.waitingForUnlock.length>0;)this.waitingForUnlock.shift().resolve();this.emit(l.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE)}this._acceptApproval()}setDefaultHomeActiveTabName(e){this.store.updateState({defaultHomeActiveTabName:e})}setConnectedStatusPopoverHasBeenShown(){this.store.updateState({connectedStatusPopoverHasBeenShown:!0})}setRecoveryPhraseReminderHasBeenShown(){this.store.updateState({recoveryPhraseReminderHasBeenShown:!0})}setRecoveryPhraseReminderLastShown(e){this.store.updateState({recoveryPhraseReminderLastShown:e})}setTermsOfUseLastAgreed(e){this.store.updateState({termsOfUseLastAgreed:e})}setSnapsInstallPrivacyWarningShownStatus(e){this.store.updateState({snapsInstallPrivacyWarningShown:e})}setOutdatedBrowserWarningLastShown(e){this.store.updateState({outdatedBrowserWarningLastShown:e})}setLastActiveTime(){this._resetTimer()}_setInactiveTimeout(e){this.store.updateState({timeoutMinutes:e}),this._resetTimer()}_resetTimer(){const{timeoutMinutes:e}=this.store.getState();this.timer?clearTimeout(this.timer):u.isManifestV3&&chrome.alarms.clear(d.AUTO_LOCK_TIMEOUT_ALARM),e&&(u.isManifestV3?(chrome.alarms.create(d.AUTO_LOCK_TIMEOUT_ALARM,{delayInMinutes:e,periodInMinutes:e}),chrome.alarms.onAlarm.addListener((e=>{e.name===d.AUTO_LOCK_TIMEOUT_ALARM&&(this.onInactiveTimeout(),chrome.alarms.clear(d.AUTO_LOCK_TIMEOUT_ALARM))}))):this.timer=setTimeout((()=>this.onInactiveTimeout()),e*c.MINUTE))}setBrowserEnvironment(e,t){this.store.updateState({browserEnvironment:{os:e,browser:t}})}addPollingToken(e,t){if(t!==p.POLLING_TOKEN_ENVIRONMENT_TYPES[p.ENVIRONMENT_TYPE_BACKGROUND]){const r=this.store.getState()[t];this.store.updateState({[t]:[...r,e]})}}removePollingToken(e,t){if(t!==p.POLLING_TOKEN_ENVIRONMENT_TYPES[p.ENVIRONMENT_TYPE_BACKGROUND]){const r=this.store.getState()[t];this.store.updateState({[t]:r.filter((t=>t!==e))})}}clearPollingTokens(){this.store.updateState({popupGasPollTokens:[],notificationGasPollTokens:[],fullScreenGasPollTokens:[]})}setShowTestnetMessageInDropdown(e){this.store.updateState({showTestnetMessageInDropdown:e})}setShowBetaHeader(e){this.store.updateState({showBetaHeader:e})}setShowProductTour(e){this.store.updateState({showProductTour:e})}setTrezorModel(e){this.store.updateState({trezorModel:e})}updateNftDropDownState(e){this.store.updateState({nftsDropdownState:e})}setFirstTimeUsedNetwork(e){const t=this.store.getState(),{usedNetworks:r}=t;r[e]=!0,this.store.updateState({usedNetworks:r})}setCurrentPopupId(e){this.store.updateState({currentPopupId:e})}getCurrentPopupId(){return this.store.getState().currentPopupId}setServiceWorkerLastActiveTime(e){this.store.updateState({serviceWorkerLastActiveTime:e})}_requestApproval(){this._approvalRequestId=(0,o.v4)(),this.messagingSystem.call("ApprovalController:addRequest",{id:this._approvalRequestId,origin:p.ORIGIN_METAMASK,type:a.ApprovalType.Unlock},!0).catch((()=>{}))}_acceptApproval(){if(this._approvalRequestId){try{this.messagingSystem.call("ApprovalController:acceptRequest",this._approvalRequestId)}catch(e){i.default.error("Failed to accept transaction approval request",e)}this._approvalRequestId=null}else i.default.error("Attempted to accept missing unlock approval request")}}r.default=f}}},{package:"$root$",file:"app/scripts/controllers/app-state.js"}],[90,{lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:8,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=8;try{const e=function(e){const t={...e,NoticeController:{noticesList:e.noticesList||[]}};return delete t.noticesList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #8${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/008.js"}],[91,{lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:9,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=9;try{const e=function(e){const t=(0,n.merge)({},e,{CurrencyController:{currentCurrency:e.currentFiat||e.fiatCurrency||"USD",conversionRate:e.conversionRate,conversionDate:e.conversionDate}});return delete t.currentFiat,delete t.fiatCurrency,delete t.conversionRate,delete t.conversionDate,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #9${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/009.js"}],[92,{lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:10,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=10;try{const e=function(e){const t=(0,n.merge)({},e,{ShapeShiftController:{shapeShiftTxList:e.shapeShiftTxList||[]}});return delete t.shapeShiftTxList,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #10${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/010.js"}],[93,{lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:11,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=11;try{const e=function(e){const t=e;return delete t.TOSHash,delete t.isDisclaimerConfirmed,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #11${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/011.js"}],[94,{lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:12,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=12;try{const e=function(e){const t=e;return t.NoticeController.noticesList.forEach((e=>{e.read&&(e.body="")})),t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #12${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/012.js"}],[95,{lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:13,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=13;try{const e=function(e){const t=e,{config:r}=t;r&&r.provider&&"testnet"===r.provider.type&&(t.config.provider.type="ropsten");return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #13${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/013.js"}],[96,{lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash");var s={version:14,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=14;try{const e=function(e){const t=e;return t.NetworkController={},t.NetworkController.provider=t.config.provider,delete t.config.provider,t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #14${e.stack}`)}return Promise.resolve(t)}};r.default=s}}},{package:"$root$",file:"app/scripts/migrations/014.js"}],[97,{"../../../shared/constants/transaction":4336,lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash"),s=e("../../../shared/constants/transaction");var o={version:15,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=15;try{const e=function(e){const t=e,{TransactionController:r}=t;if(r&&r.transactions){const{transactions:e}=r;t.TransactionController.transactions=e.map((e=>e.err?("Gave up submitting tx."===e.err.message&&(e.status=s.TransactionStatus.failed),e):e))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #15${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/015.js"}],[98,{"../../../shared/constants/transaction":4336,lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash"),s=e("../../../shared/constants/transaction");var o={version:16,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=16;try{const e=function(e){const t=e,{TransactionController:r}=t;if(r&&r.transactions){const{transactions:e}=t.TransactionController;t.TransactionController.transactions=e.map((e=>e.err?("transaction with the same hash was already imported."===e.err&&(e.status=s.TransactionStatus.submitted,delete e.err),e):e))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #16${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/016.js"}],[99,{"../../../shared/constants/transaction":4336,lodash:3617},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n=e("lodash"),s=e("../../../shared/constants/transaction");var o={version:17,migrate(e){const t=(0,n.cloneDeep)(e);t.meta.version=17;try{const e=function(e){const t=e,{TransactionController:r}=t;if(r&&r.transactions){const{transactions:e}=t.TransactionController;t.TransactionController.transactions=e.map((e=>(!e.status===s.TransactionStatus.failed||e.retryCount>0&&e.retryCount<2&&(e.status=s.TransactionStatus.submitted,delete e.err),e)))}return t}(t.data);t.data=e}catch(e){console.warn(`MetaMask Migration #17${e.stack}`)}return Promise.resolve(t)}};r.default=o}}},{package:"$root$",file:"app/scripts/migrations/017.js"}],[5,{"../../shared/constants/app":4316,"../../shared/constants/metametrics":4323,"../../shared/modules/browser-runtime.utils":4347,"../../shared/modules/mv3.utils":4356,"../../shared/modules/object.utils":4358,"./first-time-state":37,"./lib/createStreamSink":48,"./lib/ens-ipfs/setup":53,"./lib/get-first-preferred-lang-code":55,"./lib/getObjStructure":56,"./lib/local-store":57,"./lib/migrator":60,"./lib/network-store":61,"./lib/notification-manager":62,"./lib/setup-initial-state-hooks":79,"./lib/setupSentry":80,"./lib/util":82,"./metamask-controller":83,"./migrations":183,"./platforms/extension":184,"@metamask/controller-utils":1095,"@metamask/obs-store":1328,"@metamask/utils":1654,"debounce-stream":2580,"end-of-stream":2620,"eth-rpc-errors":2738,events:2336,"extension-port-stream":2823,loglevel:3629,pump:3824,"webextension-polyfill":4300},function(){with(this.scopeTerminator)with(this.globalThis)return function(){"use strict";return function(e,t,r){Object.defineProperty(r,"__esModule",{value:!0}),r.loadStateFromPersistence=le,r.setupController=ce,r.statePersistenceEvents=void 0,e("./lib/setup-initial-state-hooks");var n=L(e("events")),s=L(e("end-of-stream")),o=L(e("pump")),i=L(e("debounce-stream")),a=L(e("loglevel")),l=L(e("webextension-polyfill")),c=e("@metamask/obs-store"),d=e("@metamask/utils"),u=e("@metamask/controller-utils"),h=L(e("extension-port-stream")),p=e("eth-rpc-errors"),m=e("../../shared/constants/app"),g=e("../../shared/constants/metametrics"),f=e("../../shared/modules/browser-runtime.utils"),C=e("../../shared/modules/mv3.utils"),v=e("../../shared/modules/object.utils"),b=L(e("./migrations")),w=L(e("./lib/migrator")),k=L(e("./platforms/extension")),y=L(e("./lib/local-store")),S=(L(e("./lib/network-store")),e("./lib/setupSentry")),T=L(e("./lib/createStreamSink")),A=O(e("./lib/notification-manager")),M=O(e("./metamask-controller")),E=L(e("./first-time-state")),P=L(e("./lib/get-first-preferred-lang-code")),_=L(e("./lib/getObjStructure")),N=L(e("./lib/ens-ipfs/setup")),I=e("./lib/util");function R(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(R=function(e){return e?r:t})(e)}function O(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=R(t);if(r&&r.has(e))return r.get(e);var n={},s=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in e)if("default"!==o&&Object.prototype.hasOwnProperty.call(e,o)){var i=s?Object.getOwnPropertyDescriptor(e,o):null;i&&(i.get||i.set)?Object.defineProperty(n,o,i):n[o]=e[o]}return n.default=e,r&&r.set(e,n),n}function L(e){return e&&e.__esModule?e:{default:e}}const U=new y.default;global.stateHooks.getMostRecentPersistedState=()=>U.mostRecentRetrievedState;const{sentry:D}=global,x={...E.default},j={[m.ENVIRONMENT_TYPE_POPUP]:!0,[m.ENVIRONMENT_TYPE_NOTIFICATION]:!0,[m.ENVIRONMENT_TYPE_FULLSCREEN]:!0},F=["trezor-connect"];a.default.setLevel("info",!1);const $=new k.default,B=new A.default;let q=!1,K=!1,G=!1;const H={},V={};let W,Y;const z=new URL("https://metamask.github.io/phishing-warning/v2.1.0/"),Q=1e3,J="ACK_KEEP_ALIVE_MESSAGE",X="WORKER_KEEP_ALIVE_MESSAGE",Z=new n.default;r.statePersistenceEvents=Z;const{promise:ee,resolve:te,reject:re}=(0,I.deferredPromise)(),ne=async()=>{const e=await l.default.tabs.query({url:"<all_urls>",windowType:"normal"}).then((e=>((0,f.checkForLastErrorAndLog)(),e))).catch((()=>{(0,f.checkForLastErrorAndLog)()}));for(const t of e)l.default.tabs.sendMessage(t.id,{name:m.EXTENSION_MESSAGES.READY}).then((()=>{(0,f.checkForLastErrorAndLog)()})).catch((()=>{(0,f.checkForLastErrorAndLog)()}))};let se,oe;async function ie(){try{const e=await le(),t=e.data,r=await(0,P.default)();let n;if(C.isManifestV3){const e=await l.default.storage.session.get(["isFirstMetaMaskControllerSetup"]);n=(null==e?void 0:e.isFirstMetaMaskControllerSetup)===undefined,await l.default.storage.session.set({isFirstMetaMaskControllerSetup:n})}ce(t,r,{},n,e.meta),C.isManifestV3||await async function(){let e;try{const t=new URL("https://metamask.github.io/phishing-warning/v2.1.0/");let r,n;t.hash="#extensionStartup",e=window.document.createElement("iframe"),e.setAttribute("src",t.href),e.setAttribute("sandbox","allow-scripts allow-same-origin");const s=new Promise(((e,t)=>{r=e,n=t}));e.addEventListener("load",r),window.document.body.appendChild(e),setTimeout((()=>n(new ae)),Q),await s}catch(e){e instanceof ae?console.warn("Phishing warning page timeout; page not guaranteed to work offline."):console.error("Failed to initialize phishing warning page",e)}finally{e&&e.remove()}}(),await ne(),a.default.info("MetaMask initialization complete."),te()}catch(e){re(e)}}l.default.runtime.onConnect.addListener((async(...e)=>{await ee,se(...e)})),l.default.runtime.onConnectExternal.addListener((async(...e)=>{await ee,oe(...e)}));class ae extends Error{constructor(){super("Timeout failed")}}async function le(){const e=new w.default({migrations:b.default});if(e.on("error",console.warn),Y=await U.get()||e.generateInitialState(x),Y&&!Y.data&&(Y=e.generateInitialState(x),D.captureMessage("MetaMask - Empty vault found - unable to recover")),e.on("error",(e=>{const t=(0,_.default)(Y);D.captureException(e,{extra:{vaultStructure:t}})})),Y=await e.migrateData(Y),!Y)throw new Error("MetaMask - migrator returned undefined");if(!(0,d.isObject)(Y.meta))throw new Error(`MetaMask - migrator metadata has invalid type '${typeof Y.meta}'`);if("number"!=typeof Y.meta.version)throw new Error(`MetaMask - migrator metadata version has invalid type '${typeof Y.meta.version}'`);if(!(0,d.isObject)(Y.data))throw new Error(`MetaMask - migrator data has invalid type '${typeof Y.data}'`);return U.setMetadata(Y.meta),U.set(Y.data),Y}function ce(e,t,r,n,d){var f;W=new M.default({infuraProjectId:"b6bf7d3508c941499b10025c0776eaf8",showUserConfirmation:de,initState:e,initLangCode:t,platform:$,notificationManager:B,browser:l.default,getRequestAccountTabIds:()=>V,getOpenMetamaskTabsIds:()=>H,localStore:U,overrides:r,isFirstMetaMaskControllerSetup:n,currentMigrationVersion:d.version}),(0,N.default)({getCurrentChainId:()=>W.networkController.state.providerConfig.chainId,getIpfsGateway:W.preferencesController.getIpfsGateway.bind(W.preferencesController),provider:W.provider}),(0,o.default)((0,c.storeAsStream)(W.store),(0,i.default)(1e3),(0,T.default)((async e=>{await U.set(e),Z.emit("state-persisted",e)})),(e=>{a.default.error("MetaMask - Persistence pipeline failed",e)})),f=W,global.stateHooks.getSentryAppState=function(){const e=f.memStore.getState();return(0,v.maskObject)(e,S.SENTRY_BACKGROUND_STATE)};const b=()=>q||Boolean(Object.keys(H).length)||K,w=(e,t)=>{if(!1===e)W.onClientClosed();else{if(t===m.ENVIRONMENT_TYPE_FULLSCREEN&&Boolean(Object.keys(H).length))return;W.onEnvironmentTypeClosed(t)}};function k(){let e="";const t=y();t&&(e=String(t)),C.isManifestV3?(l.default.action.setBadgeText({text:e}),l.default.action.setBadgeBackgroundColor({color:"#037DD6"})):(l.default.browserAction.setBadgeText({text:e}),l.default.browserAction.setBadgeBackgroundColor({color:"#037DD6"}))}function y(){return W.approvalController.getTotalApprovalCount()+W.appStateController.waitingForUnlock.length}se=async e=>{var t;const n=e.name;if(F.includes(e.name))return;let o=!1;const i=(0,I.getPlatform)(),a=null!==(t=e.sender)&&void 0!==t&&t.url?new URL(e.sender.url):null;if(o=i===m.PLATFORM_FIREFOX?j[n]:(null==a?void 0:a.origin)===`chrome-extension://${l.default.runtime.id}`,o){var c;const t=(null==r||null===(c=r.getPortStream)||void 0===c?void 0:c.call(r,e))||new h.default(e);if(W.isClientOpen=!0,W.setupTrustedCommunication(t,e.sender),C.isManifestV3&&e.onMessage.addListener((t=>{t.name===X&&(e.postMessage({name:J}),W.appStateController.setServiceWorkerLastActiveTime(Date.now()))})),n===m.ENVIRONMENT_TYPE_POPUP&&(q=!0,(0,s.default)(t,(()=>{q=!1;const e=b();W.isClientOpen=e,w(e,m.ENVIRONMENT_TYPE_POPUP)}))),n===m.ENVIRONMENT_TYPE_NOTIFICATION&&(K=!0,(0,s.default)(t,(()=>{K=!1;const e=b();W.isClientOpen=e,w(e,m.ENVIRONMENT_TYPE_NOTIFICATION)}))),n===m.ENVIRONMENT_TYPE_FULLSCREEN){const r=e.sender.tab.id;H[r]=!0,(0,s.default)(t,(()=>{delete H[r];const e=b();W.isClientOpen=e,w(e,m.ENVIRONMENT_TYPE_FULLSCREEN)}))}}else if(a&&a.origin===z.origin&&a.pathname===z.pathname){var d;const t=(null==r||null===(d=r.getPortStream)||void 0===d?void 0:d.call(r,e))||new h.default(e);W.setupPhishingCommunication({connectionStream:t})}else{if(e.sender&&e.sender.tab&&e.sender.url){const t=e.sender.tab.id,r=new URL(e.sender.url),{origin:n}=r;e.onMessage.addListener((e=>{e.data&&"eth_requestAccounts"===e.data.method&&(V[n]=t)}))}oe(e)}},oe=e=>{var t;const n=(null==r||null===(t=r.getPortStream)||void 0===t?void 0:t.call(r,e))||new h.default(e);W.setupUntrustedCommunication({connectionStream:n,sender:e.sender})},null!=r&&r.registerConnectListeners&&r.registerConnectListeners(se,oe),k(),W.txController.on(M.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,k),W.decryptMessageController.hub.on(M.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,k),W.encryptionPublicKeyController.hub.on(M.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,k),W.signatureController.hub.on(M.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,k),W.appStateController.on(M.METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE,k),W.controllerMessenger.subscribe(M.METAMASK_CONTROLLER_EVENTS.APPROVAL_STATE_CHANGE,k),W.txController.initApprovals(),B.on(A.NOTIFICATION_MANAGER_EVENTS.POPUP_CLOSED,(({automaticallyClosed:e})=>{e?y()>0&&de():(Object.keys(W.txController.txStateManager.getUnapprovedTxList()).forEach((e=>W.txController.txStateManager.setTxStatusRejected(e))),W.signatureController.rejectUnapproved(g.REJECT_NOTIFICATION_CLOSE_SIG),W.decryptMessageController.rejectUnapproved(g.REJECT_NOTIFICATION_CLOSE),W.encryptionPublicKeyController.rejectUnapproved(g.REJECT_NOTIFICATION_CLOSE),Object.values(W.approvalController.state.pendingApprovals).forEach((({id:e,type:t})=>{switch(t){case u.ApprovalType.SnapDialogAlert:case u.ApprovalType.SnapDialogPrompt:W.approvalController.accept(e,null);break;case u.ApprovalType.SnapDialogConfirmation:W.approvalController.accept(e,!1);break;default:W.approvalController.reject(e,p.ethErrors.provider.userRejectedRequest())}})),k())})),Object.keys(W.snapController.state.snaps).length>0&&W.snapController.updateBlockedSnaps()}async function de(){const e=await $.getActiveTabs(),t=Boolean(e.find((e=>H[e.id]))),r=e.length>0&&e[0].extData&&e[0].extData.indexOf("vivaldi_tab")>-1;if(!G&&(r||!q)&&!t){G=!0;try{const e=W.appStateController.getCurrentPopupId();await B.showPopup((e=>W.appStateController.setCurrentPopupId(e)),e)}finally{G=!1}}}const ue=()=>{if(W)return W.metaMetricsController.updateTraits({[g.MetaMetricsUserTrait.InstallDateExt]:(new Date).toISOString().split("T")[0]}),void W.metaMetricsController.addEventBeforeMetricsOptIn({category:g.MetaMetricsEventCategory.App,event:g.MetaMetricsEventName.AppInstalled,properties:{}});setTimeout((()=>{ue()}),1e3)};l.default.runtime.onInstalled.addListener((({reason:e})=>{"install"===e&&(ue(),$.openExtensionInBrowser())})),ie().catch(a.default.error)}}},{package:"$root$",file:"app/scripts/background.js"}]],[5],{});